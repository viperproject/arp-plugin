domain ARPLog {

  function ARPLog_Nil(): ARPLog

  function ARPLog_Cons(arp_quant_ref: Ref, arp_quant_fieldId: Int, permission: Perm, arp_quant_level: Int, arp_quant_log: ARPLog): ARPLog

  function ARPLog_head_ref_Cons(arp_quant_log: ARPLog): Ref

  function ARPLog_head_fieldId_Cons(arp_quant_log: ARPLog): Int

  function ARPLog_head_permission_Cons(arp_quant_log: ARPLog): Perm

  function ARPLog_head_level_Cons(arp_quant_log: ARPLog): Int

  function ARPLog_tail_Cons(arp_quant_log: ARPLog): ARPLog

  function ARPLog_type(arp_quant_log: ARPLog): Int

  unique function ARPLog_type_Nil(): Int

  unique function ARPLog_type_Cons(): Int

  function ARPLog_is_Nil(arp_quant_log: ARPLog): Bool

  function ARPLog_is_Cons(arp_quant_log: ARPLog): Bool

  function ARPLog_max_level(arp_quant_log: ARPLog): Int

  function ARPLog_sum_gt(arp_quant_ref: Ref, arp_quant_fieldId: Int, arp_quant_level: Int, arp_quant_log: ARPLog): Perm

  function ARPLog_sum(arp_quant_ref: Ref, arp_quant_fieldId: Int, arp_quant_level: Int, arp_quant_log: ARPLog): Perm

  axiom ARPLog_destruct_over_construct_Cons {
    (forall arp_quant_head_ref: Ref, arp_quant_head_fieldId: Int, arp_quant_head_permission: Perm, arp_quant_head_level: Int, arp_quant_tail: ARPLog :: { ARPLog_Cons(arp_quant_head_ref, arp_quant_head_fieldId, arp_quant_head_permission, arp_quant_head_level, arp_quant_tail) } ARPLog_head_ref_Cons(ARPLog_Cons(arp_quant_head_ref, arp_quant_head_fieldId, arp_quant_head_permission, arp_quant_head_level, arp_quant_tail)) == arp_quant_head_ref && (ARPLog_head_fieldId_Cons(ARPLog_Cons(arp_quant_head_ref, arp_quant_head_fieldId, arp_quant_head_permission, arp_quant_head_level, arp_quant_tail)) == arp_quant_head_fieldId && (ARPLog_head_permission_Cons(ARPLog_Cons(arp_quant_head_ref, arp_quant_head_fieldId, arp_quant_head_permission, arp_quant_head_level, arp_quant_tail)) == arp_quant_head_permission && (ARPLog_head_level_Cons(ARPLog_Cons(arp_quant_head_ref, arp_quant_head_fieldId, arp_quant_head_permission, arp_quant_head_level, arp_quant_tail)) == arp_quant_head_level && ARPLog_tail_Cons(ARPLog_Cons(arp_quant_head_ref, arp_quant_head_fieldId, arp_quant_head_permission, arp_quant_head_level, arp_quant_tail)) == arp_quant_tail))))
  }

  axiom ARPLog_construct_over_destruct_Cons {
    (forall arp_quant_log: ARPLog :: { ARPLog_head_ref_Cons(arp_quant_log) } { ARPLog_head_fieldId_Cons(arp_quant_log) } { ARPLog_head_permission_Cons(arp_quant_log) } { ARPLog_head_level_Cons(arp_quant_log) } { ARPLog_tail_Cons(arp_quant_log) } ARPLog_is_Cons(arp_quant_log) ==> arp_quant_log == ARPLog_Cons(ARPLog_head_ref_Cons(arp_quant_log), ARPLog_head_fieldId_Cons(arp_quant_log), ARPLog_head_permission_Cons(arp_quant_log), ARPLog_head_level_Cons(arp_quant_log), ARPLog_tail_Cons(arp_quant_log)))
  }

  axiom ARPLog_type_of_Nil {
    ARPLog_type(ARPLog_Nil()) == ARPLog_type_Nil()
  }

  axiom ARPLog_type_of_Cons {
    (forall arp_quant_head_ref: Ref, arp_quant_head_fieldId: Int, arp_quant_head_permission: Perm, arp_quant_head_level: Int, arp_quant_tail: ARPLog :: ARPLog_type(ARPLog_Cons(arp_quant_head_ref, arp_quant_head_fieldId, arp_quant_head_permission, arp_quant_head_level, arp_quant_tail)) == ARPLog_type_Cons())
  }

  axiom ARPLog_type_existence {
    (forall arp_quant_log: ARPLog :: { ARPLog_is_Nil(arp_quant_log) } { ARPLog_is_Cons(arp_quant_log) } { ARPLog_type(arp_quant_log) } ARPLog_type(arp_quant_log) == ARPLog_type_Nil() || ARPLog_type(arp_quant_log) == ARPLog_type_Cons())
  }

  axiom ARPLog_type_is_Nil {
    (forall arp_quant_log: ARPLog :: { ARPLog_is_Nil(arp_quant_log) } { ARPLog_type(arp_quant_log) } (ARPLog_type(arp_quant_log) == ARPLog_type_Nil()) == ARPLog_is_Nil(arp_quant_log))
  }

  axiom ARPLog_type_is_Cons {
    (forall arp_quant_log: ARPLog :: { ARPLog_is_Cons(arp_quant_log) } { ARPLog_type(arp_quant_log) } (ARPLog_type(arp_quant_log) == ARPLog_type_Cons()) == ARPLog_is_Cons(arp_quant_log))
  }

  axiom ARPLog_log_max_level {
    (forall arp_quant_log: ARPLog :: { ARPLog_max_level(arp_quant_log) } ARPLog_max_level(arp_quant_log) == 6)
  }

  axiom ARPLog_sum_gt_of_log {
    (forall arp_quant_ref: Ref, arp_quant_fieldId: Int, arp_quant_level: Int, arp_quant_log: ARPLog :: { ARPLog_sum_gt(arp_quant_ref, arp_quant_fieldId, arp_quant_level, arp_quant_log) } (arp_quant_level >= ARPLog_max_level(arp_quant_log) ==> ARPLog_sum_gt(arp_quant_ref, arp_quant_fieldId, arp_quant_level, arp_quant_log) == none) && (arp_quant_level < ARPLog_max_level(arp_quant_log) ==> ARPLog_sum_gt(arp_quant_ref, arp_quant_fieldId, arp_quant_level, arp_quant_log) == ARPLog_sum_gt(arp_quant_ref, arp_quant_fieldId, arp_quant_level + 1, arp_quant_log) + ARPLog_sum(arp_quant_ref, arp_quant_fieldId, arp_quant_level + 1, arp_quant_log)))
  }

  axiom ARPLog_sum_of_log {
    (forall arp_quant_ref: Ref, arp_quant_fieldId: Int, arp_quant_level: Int, arp_quant_log: ARPLog :: { ARPLog_sum(arp_quant_ref, arp_quant_fieldId, arp_quant_level, arp_quant_log) } (ARPLog_is_Nil(arp_quant_log) ==> ARPLog_sum(arp_quant_ref, arp_quant_fieldId, arp_quant_level, arp_quant_log) == none) && (ARPLog_is_Cons(arp_quant_log) ==> ARPLog_sum(arp_quant_ref, arp_quant_fieldId, arp_quant_level, arp_quant_log) == ARPLog_sum(arp_quant_ref, arp_quant_fieldId, arp_quant_level, ARPLog_tail_Cons(arp_quant_log)) + (ARPLog_head_ref_Cons(arp_quant_log) == arp_quant_ref && (ARPLog_head_fieldId_Cons(arp_quant_log) == arp_quant_fieldId && ARPLog_head_level_Cons(arp_quant_log) == arp_quant_level) ? ARPLog_head_permission_Cons(arp_quant_log) : none)))
  }
}

domain ARP_field_functions {

  unique function field_f(): Int
}

field f: Int

function rd(): Perm
  requires false


function rdc(count: Int): Perm
  requires false


function rdw(): Perm
  requires false


function rd_token(tk: Ref): Perm
  ensures none < result && result < write


function globalRd(): Perm
  ensures none < result && result < write


function epsilonRd(): Perm
  ensures none < result && result < write


method foo_ARP_TRANSFORMED(s: Seq[Ref], foo_rd: Perm)


method bar_ARP_TRANSFORMED(s: Seq[Ref], bar_rd: Perm)
{
  var bar_log: ARPLog
  var ARP_tmpLog: ARPLog
  var ARP_havoc: ARPLog
  var foo_call_rd: Perm
  var arg_s: Seq[Ref]
  var ARP_0_tmpLog: ARPLog
  var ARP_0_havoc: ARPLog
  var ARP_1_tmpLog: ARPLog
  var ARP_1_havoc: ARPLog
  var ARP_2_tmpLog: ARPLog
  var ARP_2_havoc: ARPLog
  var foo_0_call_rd: Perm
  var arg_0_s: Seq[Ref]
  var ARP_3_tmpLog: ARPLog
  var ARP_3_havoc: ARPLog
  var ARP_4_tmpLog: ARPLog
  var ARP_4_havoc: ARPLog
  var ARP_5_tmpLog: ARPLog
  var ARP_5_havoc: ARPLog
  var foo_1_call_rd: Perm
  var arg_1_s: Seq[Ref]
  var ARP_6_tmpLog: ARPLog
  var ARP_6_havoc: ARPLog
  var ARP_7_tmpLog: ARPLog
  var ARP_7_havoc: ARPLog
  var ARP_8_tmpLog: ARPLog
  var ARP_8_havoc: ARPLog
  var foo_2_call_rd: Perm
  var arg_2_s: Seq[Ref]
  var ARP_9_tmpLog: ARPLog
  var ARP_9_havoc: ARPLog
  var ARP_10_tmpLog: ARPLog
  var ARP_10_havoc: ARPLog
  var ARP_11_tmpLog: ARPLog
  var ARP_11_havoc: ARPLog
  var foo_3_call_rd: Perm
  var arg_3_s: Seq[Ref]
  var ARP_12_tmpLog: ARPLog
  var ARP_12_havoc: ARPLog
  var ARP_13_tmpLog: ARPLog
  var ARP_13_havoc: ARPLog
  var ARP_14_tmpLog: ARPLog
  var ARP_14_havoc: ARPLog
  var foo_4_call_rd: Perm
  var arg_4_s: Seq[Ref]
  var ARP_15_tmpLog: ARPLog
  var ARP_15_havoc: ARPLog
  var ARP_16_tmpLog: ARPLog
  var ARP_16_havoc: ARPLog
  var ARP_17_tmpLog: ARPLog
  var ARP_17_havoc: ARPLog
  var foo_5_call_rd: Perm
  var arg_5_s: Seq[Ref]
  var ARP_18_tmpLog: ARPLog
  var ARP_18_havoc: ARPLog
  var ARP_19_tmpLog: ARPLog
  var ARP_19_havoc: ARPLog
  var ARP_20_tmpLog: ARPLog
  var ARP_20_havoc: ARPLog
  bar_log := ARPLog_Nil()
  inhale none < bar_rd && bar_rd < write
  inhale (forall x: Ref :: { (x in s) } (x in s) ==> acc(x.f, write))
  ARP_tmpLog := bar_log
  bar_log := ARP_havoc
  inhale (forall quantRef: Ref, quantLevel: Int, quantField: Int :: { ARPLog_sum(quantRef, quantField, quantLevel, bar_log) } ARPLog_sum(quantRef, quantField, quantLevel, bar_log) == ((quantRef in s) && quantField == field_f() ? ARPLog_sum(quantRef, quantField, quantLevel, ARP_tmpLog) + (quantLevel == 6 ? write : none) : ARPLog_sum(quantRef, quantField, quantLevel, ARP_tmpLog)))
  inhale (forall x: Ref :: { (x in s) } (x in s) ==> x.f == 5)
  inhale none < foo_call_rd && foo_call_rd < write
  arg_s := s
  label foo_call_label
  ARP_0_tmpLog := bar_log
  bar_log := ARP_0_havoc
  inhale (forall quantRef_0: Ref, quantLevel_0: Int, quantField_0: Int :: { ARPLog_sum(quantRef_0, quantField_0, quantLevel_0, bar_log) } old[foo_call_label](ARPLog_sum(quantRef_0, quantField_0, quantLevel_0, bar_log)) == ((quantRef_0 in arg_s) && quantField_0 == old[foo_call_label](field_f()) ? old[foo_call_label](ARPLog_sum(quantRef_0, quantField_0, quantLevel_0, ARP_0_tmpLog)) - (quantLevel_0 == 6 ? 1 / 20 : none) : old[foo_call_label](ARPLog_sum(quantRef_0, quantField_0, quantLevel_0, ARP_0_tmpLog))))
  exhale (forall x: Ref :: { (x in arg_s) } (x in arg_s) ==> acc(x.f, 1 / 20))
  inhale (forall x: Ref :: { (x in arg_s) } (x in arg_s) ==> acc(x.f, 1 / 20))
  ARP_1_tmpLog := bar_log
  bar_log := ARP_1_havoc
  inhale (forall quantRef_1: Ref, quantLevel_1: Int, quantField_1: Int :: { ARPLog_sum(quantRef_1, quantField_1, quantLevel_1, bar_log) } ARPLog_sum(quantRef_1, quantField_1, quantLevel_1, bar_log) == ((quantRef_1 in arg_s) && quantField_1 == field_f() ? ARPLog_sum(quantRef_1, quantField_1, quantLevel_1, ARP_1_tmpLog) + (quantLevel_1 == 6 ? 1 / 20 : none) : ARPLog_sum(quantRef_1, quantField_1, quantLevel_1, ARP_1_tmpLog)))
  label ARP_0_exhale_label
  ARP_2_tmpLog := bar_log
  bar_log := ARP_2_havoc
  inhale (forall quantRef_2: Ref, quantLevel_2: Int, quantField_2: Int :: { ARPLog_sum(quantRef_2, quantField_2, quantLevel_2, bar_log) } old[ARP_0_exhale_label](ARPLog_sum(quantRef_2, quantField_2, quantLevel_2, bar_log)) == ((quantRef_2 in s) && quantField_2 == old[ARP_0_exhale_label](field_f()) ? old[ARP_0_exhale_label](ARPLog_sum(quantRef_2, quantField_2, quantLevel_2, ARP_2_tmpLog)) - (quantLevel_2 == 6 ? 1 / 10 : none) : old[ARP_0_exhale_label](ARPLog_sum(quantRef_2, quantField_2, quantLevel_2, ARP_2_tmpLog))))
  exhale (forall x: Ref :: { (x in s) } (x in s) ==> acc(x.f, 1 / 10))
  inhale none < foo_0_call_rd && foo_0_call_rd < write
  arg_0_s := s
  label foo_0_call_label
  ARP_3_tmpLog := bar_log
  bar_log := ARP_3_havoc
  inhale (forall quantRef_3: Ref, quantLevel_3: Int, quantField_3: Int :: { ARPLog_sum(quantRef_3, quantField_3, quantLevel_3, bar_log) } old[foo_0_call_label](ARPLog_sum(quantRef_3, quantField_3, quantLevel_3, bar_log)) == ((quantRef_3 in arg_0_s) && quantField_3 == old[foo_0_call_label](field_f()) ? old[foo_0_call_label](ARPLog_sum(quantRef_3, quantField_3, quantLevel_3, ARP_3_tmpLog)) - (quantLevel_3 == 6 ? 1 / 20 : none) : old[foo_0_call_label](ARPLog_sum(quantRef_3, quantField_3, quantLevel_3, ARP_3_tmpLog))))
  exhale (forall x: Ref :: { (x in arg_0_s) } (x in arg_0_s) ==> acc(x.f, 1 / 20))
  inhale (forall x: Ref :: { (x in arg_0_s) } (x in arg_0_s) ==> acc(x.f, 1 / 20))
  ARP_4_tmpLog := bar_log
  bar_log := ARP_4_havoc
  inhale (forall quantRef_4: Ref, quantLevel_4: Int, quantField_4: Int :: { ARPLog_sum(quantRef_4, quantField_4, quantLevel_4, bar_log) } ARPLog_sum(quantRef_4, quantField_4, quantLevel_4, bar_log) == ((quantRef_4 in arg_0_s) && quantField_4 == field_f() ? ARPLog_sum(quantRef_4, quantField_4, quantLevel_4, ARP_4_tmpLog) + (quantLevel_4 == 6 ? 1 / 20 : none) : ARPLog_sum(quantRef_4, quantField_4, quantLevel_4, ARP_4_tmpLog)))
  label ARP_2_exhale_label
  ARP_5_tmpLog := bar_log
  bar_log := ARP_5_havoc
  inhale (forall quantRef_5: Ref, quantLevel_5: Int, quantField_5: Int :: { ARPLog_sum(quantRef_5, quantField_5, quantLevel_5, bar_log) } old[ARP_2_exhale_label](ARPLog_sum(quantRef_5, quantField_5, quantLevel_5, bar_log)) == ((quantRef_5 in s) && quantField_5 == old[ARP_2_exhale_label](field_f()) ? old[ARP_2_exhale_label](ARPLog_sum(quantRef_5, quantField_5, quantLevel_5, ARP_5_tmpLog)) - (quantLevel_5 == 6 ? 1 / 10 : none) : old[ARP_2_exhale_label](ARPLog_sum(quantRef_5, quantField_5, quantLevel_5, ARP_5_tmpLog))))
  exhale (forall x: Ref :: { (x in s) } (x in s) ==> acc(x.f, 1 / 10))
  inhale none < foo_1_call_rd && foo_1_call_rd < write
  arg_1_s := s
  label foo_1_call_label
  ARP_6_tmpLog := bar_log
  bar_log := ARP_6_havoc
  inhale (forall quantRef_6: Ref, quantLevel_6: Int, quantField_6: Int :: { ARPLog_sum(quantRef_6, quantField_6, quantLevel_6, bar_log) } old[foo_1_call_label](ARPLog_sum(quantRef_6, quantField_6, quantLevel_6, bar_log)) == ((quantRef_6 in arg_1_s) && quantField_6 == old[foo_1_call_label](field_f()) ? old[foo_1_call_label](ARPLog_sum(quantRef_6, quantField_6, quantLevel_6, ARP_6_tmpLog)) - (quantLevel_6 == 6 ? 1 / 20 : none) : old[foo_1_call_label](ARPLog_sum(quantRef_6, quantField_6, quantLevel_6, ARP_6_tmpLog))))
  exhale (forall x: Ref :: { (x in arg_1_s) } (x in arg_1_s) ==> acc(x.f, 1 / 20))
  inhale (forall x: Ref :: { (x in arg_1_s) } (x in arg_1_s) ==> acc(x.f, 1 / 20))
  ARP_7_tmpLog := bar_log
  bar_log := ARP_7_havoc
  inhale (forall quantRef_7: Ref, quantLevel_7: Int, quantField_7: Int :: { ARPLog_sum(quantRef_7, quantField_7, quantLevel_7, bar_log) } ARPLog_sum(quantRef_7, quantField_7, quantLevel_7, bar_log) == ((quantRef_7 in arg_1_s) && quantField_7 == field_f() ? ARPLog_sum(quantRef_7, quantField_7, quantLevel_7, ARP_7_tmpLog) + (quantLevel_7 == 6 ? 1 / 20 : none) : ARPLog_sum(quantRef_7, quantField_7, quantLevel_7, ARP_7_tmpLog)))
  label ARP_4_exhale_label
  ARP_8_tmpLog := bar_log
  bar_log := ARP_8_havoc
  inhale (forall quantRef_8: Ref, quantLevel_8: Int, quantField_8: Int :: { ARPLog_sum(quantRef_8, quantField_8, quantLevel_8, bar_log) } old[ARP_4_exhale_label](ARPLog_sum(quantRef_8, quantField_8, quantLevel_8, bar_log)) == ((quantRef_8 in s) && quantField_8 == old[ARP_4_exhale_label](field_f()) ? old[ARP_4_exhale_label](ARPLog_sum(quantRef_8, quantField_8, quantLevel_8, ARP_8_tmpLog)) - (quantLevel_8 == 6 ? 1 / 10 : none) : old[ARP_4_exhale_label](ARPLog_sum(quantRef_8, quantField_8, quantLevel_8, ARP_8_tmpLog))))
  exhale (forall x: Ref :: { (x in s) } (x in s) ==> acc(x.f, 1 / 10))
  inhale none < foo_2_call_rd && foo_2_call_rd < write
  arg_2_s := s
  label foo_2_call_label
  ARP_9_tmpLog := bar_log
  bar_log := ARP_9_havoc
  inhale (forall quantRef_9: Ref, quantLevel_9: Int, quantField_9: Int :: { ARPLog_sum(quantRef_9, quantField_9, quantLevel_9, bar_log) } old[foo_2_call_label](ARPLog_sum(quantRef_9, quantField_9, quantLevel_9, bar_log)) == ((quantRef_9 in arg_2_s) && quantField_9 == old[foo_2_call_label](field_f()) ? old[foo_2_call_label](ARPLog_sum(quantRef_9, quantField_9, quantLevel_9, ARP_9_tmpLog)) - (quantLevel_9 == 6 ? 1 / 20 : none) : old[foo_2_call_label](ARPLog_sum(quantRef_9, quantField_9, quantLevel_9, ARP_9_tmpLog))))
  exhale (forall x: Ref :: { (x in arg_2_s) } (x in arg_2_s) ==> acc(x.f, 1 / 20))
  inhale (forall x: Ref :: { (x in arg_2_s) } (x in arg_2_s) ==> acc(x.f, 1 / 20))
  ARP_10_tmpLog := bar_log
  bar_log := ARP_10_havoc
  inhale (forall quantRef_10: Ref, quantLevel_10: Int, quantField_10: Int :: { ARPLog_sum(quantRef_10, quantField_10, quantLevel_10, bar_log) } ARPLog_sum(quantRef_10, quantField_10, quantLevel_10, bar_log) == ((quantRef_10 in arg_2_s) && quantField_10 == field_f() ? ARPLog_sum(quantRef_10, quantField_10, quantLevel_10, ARP_10_tmpLog) + (quantLevel_10 == 6 ? 1 / 20 : none) : ARPLog_sum(quantRef_10, quantField_10, quantLevel_10, ARP_10_tmpLog)))
  inhale (forall x: Ref :: { (x in s) } (x in s) ==> acc(x.f, 1 / 10))
  ARP_11_tmpLog := bar_log
  bar_log := ARP_11_havoc
  inhale (forall quantRef_11: Ref, quantLevel_11: Int, quantField_11: Int :: { ARPLog_sum(quantRef_11, quantField_11, quantLevel_11, bar_log) } ARPLog_sum(quantRef_11, quantField_11, quantLevel_11, bar_log) == ((quantRef_11 in s) && quantField_11 == field_f() ? ARPLog_sum(quantRef_11, quantField_11, quantLevel_11, ARP_11_tmpLog) + (quantLevel_11 == 6 ? 1 / 10 : none) : ARPLog_sum(quantRef_11, quantField_11, quantLevel_11, ARP_11_tmpLog)))
  inhale none < foo_3_call_rd && foo_3_call_rd < write
  arg_3_s := s
  label foo_3_call_label
  ARP_12_tmpLog := bar_log
  bar_log := ARP_12_havoc
  inhale (forall quantRef_12: Ref, quantLevel_12: Int, quantField_12: Int :: { ARPLog_sum(quantRef_12, quantField_12, quantLevel_12, bar_log) } old[foo_3_call_label](ARPLog_sum(quantRef_12, quantField_12, quantLevel_12, bar_log)) == ((quantRef_12 in arg_3_s) && quantField_12 == old[foo_3_call_label](field_f()) ? old[foo_3_call_label](ARPLog_sum(quantRef_12, quantField_12, quantLevel_12, ARP_12_tmpLog)) - (quantLevel_12 == 6 ? 1 / 20 : none) : old[foo_3_call_label](ARPLog_sum(quantRef_12, quantField_12, quantLevel_12, ARP_12_tmpLog))))
  exhale (forall x: Ref :: { (x in arg_3_s) } (x in arg_3_s) ==> acc(x.f, 1 / 20))
  inhale (forall x: Ref :: { (x in arg_3_s) } (x in arg_3_s) ==> acc(x.f, 1 / 20))
  ARP_13_tmpLog := bar_log
  bar_log := ARP_13_havoc
  inhale (forall quantRef_13: Ref, quantLevel_13: Int, quantField_13: Int :: { ARPLog_sum(quantRef_13, quantField_13, quantLevel_13, bar_log) } ARPLog_sum(quantRef_13, quantField_13, quantLevel_13, bar_log) == ((quantRef_13 in arg_3_s) && quantField_13 == field_f() ? ARPLog_sum(quantRef_13, quantField_13, quantLevel_13, ARP_13_tmpLog) + (quantLevel_13 == 6 ? 1 / 20 : none) : ARPLog_sum(quantRef_13, quantField_13, quantLevel_13, ARP_13_tmpLog)))
  inhale (forall x: Ref :: { (x in s) } (x in s) ==> acc(x.f, 1 / 10))
  ARP_14_tmpLog := bar_log
  bar_log := ARP_14_havoc
  inhale (forall quantRef_14: Ref, quantLevel_14: Int, quantField_14: Int :: { ARPLog_sum(quantRef_14, quantField_14, quantLevel_14, bar_log) } ARPLog_sum(quantRef_14, quantField_14, quantLevel_14, bar_log) == ((quantRef_14 in s) && quantField_14 == field_f() ? ARPLog_sum(quantRef_14, quantField_14, quantLevel_14, ARP_14_tmpLog) + (quantLevel_14 == 6 ? 1 / 10 : none) : ARPLog_sum(quantRef_14, quantField_14, quantLevel_14, ARP_14_tmpLog)))
  inhale none < foo_4_call_rd && foo_4_call_rd < write
  arg_4_s := s
  label foo_4_call_label
  ARP_15_tmpLog := bar_log
  bar_log := ARP_15_havoc
  inhale (forall quantRef_15: Ref, quantLevel_15: Int, quantField_15: Int :: { ARPLog_sum(quantRef_15, quantField_15, quantLevel_15, bar_log) } old[foo_4_call_label](ARPLog_sum(quantRef_15, quantField_15, quantLevel_15, bar_log)) == ((quantRef_15 in arg_4_s) && quantField_15 == old[foo_4_call_label](field_f()) ? old[foo_4_call_label](ARPLog_sum(quantRef_15, quantField_15, quantLevel_15, ARP_15_tmpLog)) - (quantLevel_15 == 6 ? 1 / 20 : none) : old[foo_4_call_label](ARPLog_sum(quantRef_15, quantField_15, quantLevel_15, ARP_15_tmpLog))))
  exhale (forall x: Ref :: { (x in arg_4_s) } (x in arg_4_s) ==> acc(x.f, 1 / 20))
  inhale (forall x: Ref :: { (x in arg_4_s) } (x in arg_4_s) ==> acc(x.f, 1 / 20))
  ARP_16_tmpLog := bar_log
  bar_log := ARP_16_havoc
  inhale (forall quantRef_16: Ref, quantLevel_16: Int, quantField_16: Int :: { ARPLog_sum(quantRef_16, quantField_16, quantLevel_16, bar_log) } ARPLog_sum(quantRef_16, quantField_16, quantLevel_16, bar_log) == ((quantRef_16 in arg_4_s) && quantField_16 == field_f() ? ARPLog_sum(quantRef_16, quantField_16, quantLevel_16, ARP_16_tmpLog) + (quantLevel_16 == 6 ? 1 / 20 : none) : ARPLog_sum(quantRef_16, quantField_16, quantLevel_16, ARP_16_tmpLog)))
  inhale (forall x: Ref :: { (x in s) } (x in s) ==> acc(x.f, 1 / 10))
  ARP_17_tmpLog := bar_log
  bar_log := ARP_17_havoc
  inhale (forall quantRef_17: Ref, quantLevel_17: Int, quantField_17: Int :: { ARPLog_sum(quantRef_17, quantField_17, quantLevel_17, bar_log) } ARPLog_sum(quantRef_17, quantField_17, quantLevel_17, bar_log) == ((quantRef_17 in s) && quantField_17 == field_f() ? ARPLog_sum(quantRef_17, quantField_17, quantLevel_17, ARP_17_tmpLog) + (quantLevel_17 == 6 ? 1 / 10 : none) : ARPLog_sum(quantRef_17, quantField_17, quantLevel_17, ARP_17_tmpLog)))
  inhale none < foo_5_call_rd && foo_5_call_rd < write
  arg_5_s := s
  label foo_5_call_label
  ARP_18_tmpLog := bar_log
  bar_log := ARP_18_havoc
  inhale (forall quantRef_18: Ref, quantLevel_18: Int, quantField_18: Int :: { ARPLog_sum(quantRef_18, quantField_18, quantLevel_18, bar_log) } old[foo_5_call_label](ARPLog_sum(quantRef_18, quantField_18, quantLevel_18, bar_log)) == ((quantRef_18 in arg_5_s) && quantField_18 == old[foo_5_call_label](field_f()) ? old[foo_5_call_label](ARPLog_sum(quantRef_18, quantField_18, quantLevel_18, ARP_18_tmpLog)) - (quantLevel_18 == 6 ? 1 / 20 : none) : old[foo_5_call_label](ARPLog_sum(quantRef_18, quantField_18, quantLevel_18, ARP_18_tmpLog))))
  exhale (forall x: Ref :: { (x in arg_5_s) } (x in arg_5_s) ==> acc(x.f, 1 / 20))
  inhale (forall x: Ref :: { (x in arg_5_s) } (x in arg_5_s) ==> acc(x.f, 1 / 20))
  ARP_19_tmpLog := bar_log
  bar_log := ARP_19_havoc
  inhale (forall quantRef_19: Ref, quantLevel_19: Int, quantField_19: Int :: { ARPLog_sum(quantRef_19, quantField_19, quantLevel_19, bar_log) } ARPLog_sum(quantRef_19, quantField_19, quantLevel_19, bar_log) == ((quantRef_19 in arg_5_s) && quantField_19 == field_f() ? ARPLog_sum(quantRef_19, quantField_19, quantLevel_19, ARP_19_tmpLog) + (quantLevel_19 == 6 ? 1 / 20 : none) : ARPLog_sum(quantRef_19, quantField_19, quantLevel_19, ARP_19_tmpLog)))
  label bar_end_label
  ARP_20_tmpLog := bar_log
  bar_log := ARP_20_havoc
  inhale (forall quantRef_20: Ref, quantLevel_20: Int, quantField_20: Int :: { ARPLog_sum(quantRef_20, quantField_20, quantLevel_20, bar_log) } old[bar_end_label](ARPLog_sum(quantRef_20, quantField_20, quantLevel_20, bar_log)) == ((quantRef_20 in s) && quantField_20 == old[bar_end_label](field_f()) ? old[bar_end_label](ARPLog_sum(quantRef_20, quantField_20, quantLevel_20, ARP_20_tmpLog)) - (quantLevel_20 == 6 ? write : none) : old[bar_end_label](ARPLog_sum(quantRef_20, quantField_20, quantLevel_20, ARP_20_tmpLog))))
  exhale (forall x: Ref :: { (x in s) } (x in s) ==> acc(x.f, write))
  exhale (forall x: Ref :: { (x in s) } old[bar_end_label]((x in s) ==> x.f == 5))
}

method foo(s: Seq[Ref], foo_0_rd: Perm)
  requires none < foo_0_rd && foo_0_rd < write
  requires (forall x: Ref :: { (x in s) } (x in s) ==> acc(x.f, 1 / 20))
  ensures (forall x: Ref :: { (x in s) } (x in s) ==> acc(x.f, 1 / 20))


method bar(s: Seq[Ref], bar_0_rd: Perm)
  requires none < bar_0_rd && bar_0_rd < write
  requires (forall x: Ref :: { (x in s) } (x in s) ==> acc(x.f, write))
  requires (forall x: Ref :: { (x in s) } (x in s) ==> x.f == 5)
  ensures (forall x: Ref :: { (x in s) } (x in s) ==> acc(x.f, write))
  ensures (forall x: Ref :: { (x in s) } (x in s) ==> x.f == 5)


method HavocPerm() returns (returnval: Perm)


method HavocInt() returns (returnval_0: Int)


method HavocBool() returns (returnval_1: Bool)


method HavocRef() returns (returnval_2: Ref)
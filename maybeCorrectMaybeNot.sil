domain PyType {

  function extends_(sub: PyType, super: PyType): Bool

  function issubtype(sub: PyType, super: PyType): Bool

  function isnotsubtype(sub: PyType, super: PyType): Bool

  function tuple_args(t: PyType): Seq[PyType]

  function typeof(obj: Ref): PyType

  function get_basic(t: PyType): PyType

  function union_type_1(arg_1: PyType): PyType

  function union_type_2(arg_1: PyType, arg_2: PyType): PyType

  function union_type_3(arg_1: PyType, arg_2: PyType, arg_3: PyType): PyType

  function union_type_4(arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType): PyType

  unique function Place(): PyType

  unique function object(): PyType

  unique function dict_basic(): PyType

  function dict(arg0: PyType, arg1: PyType): PyType

  function dict_arg(typ: PyType, index: Int): PyType

  unique function int(): PyType

  unique function range(): PyType

  unique function Thread(): PyType

  unique function type(): PyType

  unique function list_basic(): PyType

  function list(arg0: PyType): PyType

  function list_arg(typ: PyType, index: Int): PyType

  unique function traceback(): PyType

  unique function Exception(): PyType

  unique function bytes(): PyType

  unique function LevelType(): PyType

  unique function tuple_basic(): PyType

  function tuple(args: Seq[PyType]): PyType

  function tuple_arg(typ: PyType, index: Int): PyType

  unique function str(): PyType

  unique function bool(): PyType

  unique function Sequence_basic(): PyType

  function Sequence(arg0: PyType): PyType

  function Sequence_arg(typ: PyType, index: Int): PyType

  unique function set_basic(): PyType

  function set(arg0: PyType): PyType

  function set_arg(typ: PyType, index: Int): PyType

  unique function NoneType(): PyType

  unique function slice(): PyType

  unique function Iterator_basic(): PyType

  function Iterator(arg0: PyType): PyType

  function Iterator_arg(typ: PyType, index: Int): PyType

  unique function __prim__Sequence_type(): PyType

  unique function Clazz(): PyType

  axiom issubtype_transitivity {
    (forall sub: PyType, middle: PyType, super: PyType :: { issubtype(sub, middle),issubtype(middle, super) } issubtype(sub, middle) && issubtype(middle, super) ==> issubtype(sub, super))
  }

  axiom issubtype_reflexivity {
    (forall type_: PyType :: { issubtype(type_, type_) } issubtype(type_, type_))
  }

  axiom extends_implies_subtype {
    (forall sub: PyType, sub2: PyType :: { extends_(sub, sub2) } extends_(sub, sub2) ==> issubtype(sub, sub2))
  }

  axiom null_nonetype {
    (forall r: Ref :: { typeof(r) } issubtype(typeof(r), NoneType()) == (r == null))
  }

  axiom issubtype_object {
    (forall type_: PyType :: { issubtype(type_, object()) } issubtype(type_, object()))
  }

  axiom issubtype_exclusion {
    (forall sub: PyType, sub2: PyType, super: PyType :: { extends_(sub, super),extends_(sub2, super) } extends_(sub, super) && (extends_(sub2, super) && sub != sub2) ==> isnotsubtype(sub, sub2) && isnotsubtype(sub2, sub))
  }

  axiom issubtype_exclusion_2 {
    (forall sub: PyType, super: PyType :: { issubtype(sub, super) } { issubtype(super, sub) } issubtype(sub, super) && sub != super ==> !issubtype(super, sub))
  }

  axiom issubtype_exclusion_propagation {
    (forall sub: PyType, middle: PyType, super: PyType :: { issubtype(sub, middle),isnotsubtype(middle, super) } issubtype(sub, middle) && isnotsubtype(middle, super) ==> !issubtype(sub, super))
  }

  axiom tuple_arg_def {
    (forall seq: Seq[PyType], i: Int, Z: PyType :: { tuple(seq),tuple_arg(Z, i) } issubtype(Z, tuple(seq)) ==> issubtype(tuple_arg(Z, i), seq[i]))
  }

  axiom tuple_args_def {
    (forall seq: Seq[PyType], Z: PyType :: { issubtype(Z, tuple(seq)) } issubtype(Z, tuple(seq)) ==> |tuple_args(Z)| == |seq|)
  }

  axiom tuple_self_subtype {
    (forall seq1: Seq[PyType], seq2: Seq[PyType] :: seq1 != seq2 && (|seq1| == |seq2| && (forall i: Int :: i >= 0 && i < |seq1| ==> issubtype(seq1[i], seq2[i]))) ==> issubtype(tuple(seq1), tuple(seq2)))
  }

  axiom union_subtype_1 {
    (forall arg_1: PyType, X: PyType :: { issubtype(X, union_type_1(arg_1)) } issubtype(X, union_type_1(arg_1)) == (false || issubtype(X, arg_1)))
  }

  axiom union_subtype_2 {
    (forall arg_1: PyType, arg_2: PyType, X: PyType :: { issubtype(X, union_type_2(arg_1, arg_2)) } issubtype(X, union_type_2(arg_1, arg_2)) == (false || (issubtype(X, arg_1) || issubtype(X, arg_2))))
  }

  axiom union_subtype_3 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, X: PyType :: { issubtype(X, union_type_3(arg_1, arg_2, arg_3)) } issubtype(X, union_type_3(arg_1, arg_2, arg_3)) == (false || (issubtype(X, arg_1) || (issubtype(X, arg_2) || issubtype(X, arg_3)))))
  }

  axiom union_subtype_4 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType, X: PyType :: { issubtype(X, union_type_4(arg_1, arg_2, arg_3, arg_4)) } issubtype(X, union_type_4(arg_1, arg_2, arg_3, arg_4)) == (false || (issubtype(X, arg_1) || (issubtype(X, arg_2) || (issubtype(X, arg_3) || issubtype(X, arg_4))))))
  }

  axiom subtype_union_1 {
    (forall arg_1: PyType, X: PyType :: { issubtype(union_type_1(arg_1), X) } issubtype(union_type_1(arg_1), X) == (true && issubtype(arg_1, X)))
  }

  axiom subtype_union_2 {
    (forall arg_1: PyType, arg_2: PyType, X: PyType :: { issubtype(union_type_2(arg_1, arg_2), X) } issubtype(union_type_2(arg_1, arg_2), X) == (true && (issubtype(arg_1, X) && issubtype(arg_2, X))))
  }

  axiom subtype_union_3 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, X: PyType :: { issubtype(union_type_3(arg_1, arg_2, arg_3), X) } issubtype(union_type_3(arg_1, arg_2, arg_3), X) == (true && (issubtype(arg_1, X) && (issubtype(arg_2, X) && issubtype(arg_3, X)))))
  }

  axiom subtype_union_4 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType, X: PyType :: { issubtype(union_type_4(arg_1, arg_2, arg_3, arg_4), X) } issubtype(union_type_4(arg_1, arg_2, arg_3, arg_4), X) == (true && (issubtype(arg_1, X) && (issubtype(arg_2, X) && (issubtype(arg_3, X) && issubtype(arg_4, X))))))
  }

  axiom subtype_Place {
    extends_(Place(), object()) && get_basic(Place()) == Place()
  }

  axiom subtype_dict {
    (forall var0: PyType, var1: PyType :: { dict(var0, var1) } extends_(dict(var0, var1), object()) && get_basic(dict(var0, var1)) == dict_basic())
  }

  axiom dict_args0 {
    (forall Z: PyType, arg0: PyType, arg1: PyType :: issubtype(Z, dict(arg0, arg1)) ==> dict_arg(Z, 0) == arg0)
  }

  axiom dict_args1 {
    (forall Z: PyType, arg0: PyType, arg1: PyType :: issubtype(Z, dict(arg0, arg1)) ==> dict_arg(Z, 1) == arg1)
  }

  axiom subtype_int {
    extends_(int(), object()) && get_basic(int()) == int()
  }

  axiom subtype_range {
    extends_(range(), object()) && get_basic(range()) == range()
  }

  axiom subtype_Thread {
    extends_(Thread(), object()) && get_basic(Thread()) == Thread()
  }

  axiom subtype_type {
    extends_(type(), object()) && get_basic(type()) == type()
  }

  axiom subtype_list {
    (forall var0: PyType :: { list(var0) } extends_(list(var0), object()) && get_basic(list(var0)) == list_basic())
  }

  axiom list_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, list(arg0)) ==> list_arg(Z, 0) == arg0)
  }

  axiom subtype_traceback {
    extends_(traceback(), object()) && get_basic(traceback()) == traceback()
  }

  axiom subtype_Exception {
    extends_(Exception(), object()) && get_basic(Exception()) == Exception()
  }

  axiom subtype_bytes {
    extends_(bytes(), object()) && get_basic(bytes()) == bytes()
  }

  axiom subtype_tuple {
    (forall args: Seq[PyType] :: { tuple(args) } ((forall e: PyType :: (e in args) ==> e == object()) ==> extends_(tuple(args), object())) && get_basic(tuple(args)) == tuple_basic())
  }

  axiom subtype_str {
    extends_(str(), object()) && get_basic(str()) == str()
  }

  axiom subtype_bool {
    extends_(bool(), int()) && get_basic(bool()) == bool()
  }

  axiom subtype_Sequence {
    (forall var0: PyType :: { Sequence(var0) } extends_(Sequence(var0), object()) && get_basic(Sequence(var0)) == Sequence_basic())
  }

  axiom Sequence_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, Sequence(arg0)) ==> Sequence_arg(Z, 0) == arg0)
  }

  axiom subtype_set {
    (forall var0: PyType :: { set(var0) } extends_(set(var0), object()) && get_basic(set(var0)) == set_basic())
  }

  axiom set_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, set(arg0)) ==> set_arg(Z, 0) == arg0)
  }

  axiom subtype_NoneType {
    extends_(NoneType(), object()) && get_basic(NoneType()) == NoneType()
  }

  axiom subtype_slice {
    extends_(slice(), object()) && get_basic(slice()) == slice()
  }

  axiom subtype_Iterator {
    (forall var0: PyType :: { Iterator(var0) } extends_(Iterator(var0), object()) && get_basic(Iterator(var0)) == Iterator_basic())
  }

  axiom Iterator_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, Iterator(arg0)) ==> Iterator_arg(Z, 0) == arg0)
  }

  axiom subtype___prim__Sequence_type {
    extends_(__prim__Sequence_type(), object()) && get_basic(__prim__Sequence_type()) == __prim__Sequence_type()
  }

  axiom subtype_Clazz {
    extends_(Clazz(), object()) && get_basic(Clazz()) == Clazz()
  }
}

domain Function {


}

domain Measure$ {

  function Measure$create(guard: Bool, key: Ref, value: Int): Measure$

  function Measure$guard(m: Measure$): Bool

  function Measure$key(m: Measure$): Ref

  function Measure$value(m: Measure$): Int

  axiom Measure$A0 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$guard(Measure$create(g, k, v)) } Measure$guard(Measure$create(g, k, v)) == g)
  }

  axiom Measure$A1 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$key(Measure$create(g, k, v)) } Measure$key(Measure$create(g, k, v)) == k)
  }

  axiom Measure$A2 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$value(Measure$create(g, k, v)) } Measure$value(Measure$create(g, k, v)) == v)
  }
}

domain _Name {

  function _combine(n1: _Name, n2: _Name): _Name

  function _single(n: Int): _Name

  function _get_combined_prefix(n: _Name): _Name

  function _get_combined_name(n: _Name): _Name

  function _get_value(n: _Name): Int

  function _is_single(n: _Name): Bool

  axiom all_single_or_combined {
    (forall n: _Name :: n == _single(_get_value(n)) || n == _combine(_get_combined_prefix(n), _get_combined_name(n)))
  }

  axiom single_is_single {
    (forall i: Int :: { _single(i) } _is_single(_single(i)))
  }

  axiom combined_is_not_single {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } !_is_single(_combine(n1, n2)))
  }

  axiom decompose_single {
    (forall i: Int :: { _single(i) } _get_value(_single(i)) == i)
  }

  axiom decompose_combined_prefix {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } _get_combined_prefix(_combine(n1, n2)) == n1)
  }

  axiom decompose_combined_name {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } _get_combined_name(_combine(n1, n2)) == n2)
  }
}

domain ARPLog {

  function ARPLog_Nil(): ARPLog

  function ARPLog_Cons(arp_quant_ref: Ref, arp_quant_fieldId: Int, permission: Perm, arp_quant_level: Int, arp_quant_log: ARPLog): ARPLog

  function ARPLog_head_ref_Cons(arp_quant_log: ARPLog): Ref

  function ARPLog_head_fieldId_Cons(arp_quant_log: ARPLog): Int

  function ARPLog_head_permission_Cons(arp_quant_log: ARPLog): Perm

  function ARPLog_head_level_Cons(arp_quant_log: ARPLog): Int

  function ARPLog_tail_Cons(arp_quant_log: ARPLog): ARPLog

  function ARPLog_type(arp_quant_log: ARPLog): Int

  unique function ARPLog_type_Nil(): Int

  unique function ARPLog_type_Cons(): Int

  function ARPLog_is_Nil(arp_quant_log: ARPLog): Bool

  function ARPLog_is_Cons(arp_quant_log: ARPLog): Bool

  function ARPLog_max_level(arp_quant_log: ARPLog): Int

  function ARPLog_sum_gt(arp_quant_ref: Ref, arp_quant_fieldId: Int, arp_quant_level: Int, arp_quant_log: ARPLog): Perm

  function ARPLog_sum(arp_quant_ref: Ref, arp_quant_fieldId: Int, arp_quant_level: Int, arp_quant_log: ARPLog): Perm

  axiom ARPLog_destruct_over_construct_Cons {
    (forall arp_quant_head_ref: Ref, arp_quant_head_fieldId: Int, arp_quant_head_permission: Perm, arp_quant_head_level: Int, arp_quant_tail: ARPLog :: { ARPLog_Cons(arp_quant_head_ref, arp_quant_head_fieldId, arp_quant_head_permission, arp_quant_head_level, arp_quant_tail) } ARPLog_head_ref_Cons(ARPLog_Cons(arp_quant_head_ref, arp_quant_head_fieldId, arp_quant_head_permission, arp_quant_head_level, arp_quant_tail)) == arp_quant_head_ref && (ARPLog_head_fieldId_Cons(ARPLog_Cons(arp_quant_head_ref, arp_quant_head_fieldId, arp_quant_head_permission, arp_quant_head_level, arp_quant_tail)) == arp_quant_head_fieldId && (ARPLog_head_permission_Cons(ARPLog_Cons(arp_quant_head_ref, arp_quant_head_fieldId, arp_quant_head_permission, arp_quant_head_level, arp_quant_tail)) == arp_quant_head_permission && (ARPLog_head_level_Cons(ARPLog_Cons(arp_quant_head_ref, arp_quant_head_fieldId, arp_quant_head_permission, arp_quant_head_level, arp_quant_tail)) == arp_quant_head_level && ARPLog_tail_Cons(ARPLog_Cons(arp_quant_head_ref, arp_quant_head_fieldId, arp_quant_head_permission, arp_quant_head_level, arp_quant_tail)) == arp_quant_tail))))
  }

  axiom ARPLog_construct_over_destruct_Cons {
    (forall arp_quant_log: ARPLog :: { ARPLog_head_ref_Cons(arp_quant_log) } { ARPLog_head_fieldId_Cons(arp_quant_log) } { ARPLog_head_permission_Cons(arp_quant_log) } { ARPLog_head_level_Cons(arp_quant_log) } { ARPLog_tail_Cons(arp_quant_log) } ARPLog_is_Cons(arp_quant_log) ==> arp_quant_log == ARPLog_Cons(ARPLog_head_ref_Cons(arp_quant_log), ARPLog_head_fieldId_Cons(arp_quant_log), ARPLog_head_permission_Cons(arp_quant_log), ARPLog_head_level_Cons(arp_quant_log), ARPLog_tail_Cons(arp_quant_log)))
  }

  axiom ARPLog_type_of_Nil {
    ARPLog_type(ARPLog_Nil()) == ARPLog_type_Nil()
  }

  axiom ARPLog_type_of_Cons {
    (forall arp_quant_head_ref: Ref, arp_quant_head_fieldId: Int, arp_quant_head_permission: Perm, arp_quant_head_level: Int, arp_quant_tail: ARPLog :: ARPLog_type(ARPLog_Cons(arp_quant_head_ref, arp_quant_head_fieldId, arp_quant_head_permission, arp_quant_head_level, arp_quant_tail)) == ARPLog_type_Cons())
  }

  axiom ARPLog_type_existence {
    (forall arp_quant_log: ARPLog :: { ARPLog_is_Nil(arp_quant_log) } { ARPLog_is_Cons(arp_quant_log) } { ARPLog_type(arp_quant_log) } ARPLog_type(arp_quant_log) == ARPLog_type_Nil() || ARPLog_type(arp_quant_log) == ARPLog_type_Cons())
  }

  axiom ARPLog_type_is_Nil {
    (forall arp_quant_log: ARPLog :: { ARPLog_is_Nil(arp_quant_log) } { ARPLog_type(arp_quant_log) } (ARPLog_type(arp_quant_log) == ARPLog_type_Nil()) == ARPLog_is_Nil(arp_quant_log))
  }

  axiom ARPLog_type_is_Cons {
    (forall arp_quant_log: ARPLog :: { ARPLog_is_Cons(arp_quant_log) } { ARPLog_type(arp_quant_log) } (ARPLog_type(arp_quant_log) == ARPLog_type_Cons()) == ARPLog_is_Cons(arp_quant_log))
  }

  axiom ARPLog_log_max_level {
    (forall arp_quant_log: ARPLog :: { ARPLog_max_level(arp_quant_log) } ARPLog_max_level(arp_quant_log) == 6)
  }

  axiom ARPLog_sum_gt_of_log {
    (forall arp_quant_ref: Ref, arp_quant_fieldId: Int, arp_quant_level: Int, arp_quant_log: ARPLog :: { ARPLog_sum_gt(arp_quant_ref, arp_quant_fieldId, arp_quant_level, arp_quant_log) } (arp_quant_level >= ARPLog_max_level(arp_quant_log) ==> ARPLog_sum_gt(arp_quant_ref, arp_quant_fieldId, arp_quant_level, arp_quant_log) == none) && (arp_quant_level < ARPLog_max_level(arp_quant_log) ==> ARPLog_sum_gt(arp_quant_ref, arp_quant_fieldId, arp_quant_level, arp_quant_log) == ARPLog_sum_gt(arp_quant_ref, arp_quant_fieldId, arp_quant_level + 1, arp_quant_log) + ARPLog_sum(arp_quant_ref, arp_quant_fieldId, arp_quant_level + 1, arp_quant_log)))
  }

  axiom ARPLog_sum_of_log {
    (forall arp_quant_ref: Ref, arp_quant_fieldId: Int, arp_quant_level: Int, arp_quant_log: ARPLog :: { ARPLog_sum(arp_quant_ref, arp_quant_fieldId, arp_quant_level, arp_quant_log) } (ARPLog_is_Nil(arp_quant_log) ==> ARPLog_sum(arp_quant_ref, arp_quant_fieldId, arp_quant_level, arp_quant_log) == none) && (ARPLog_is_Cons(arp_quant_log) ==> ARPLog_sum(arp_quant_ref, arp_quant_fieldId, arp_quant_level, arp_quant_log) == ARPLog_sum(arp_quant_ref, arp_quant_fieldId, arp_quant_level, ARPLog_tail_Cons(arp_quant_log)) + (ARPLog_head_ref_Cons(arp_quant_log) == arp_quant_ref && (ARPLog_head_fieldId_Cons(arp_quant_log) == arp_quant_fieldId && ARPLog_head_level_Cons(arp_quant_log) == arp_quant_level) ? ARPLog_head_permission_Cons(arp_quant_log) : none)))
  }
}

domain ARP_field_functions {

  unique function field__val(): Int

  unique function field___container(): Int

  unique function field___iter_index(): Int

  unique function field___previous(): Int

  unique function field_list_acc(): Int

  unique function field_set_acc(): Int

  unique function field_dict_acc(): Int

  unique function field_Measure$acc(): Int

  unique function field_MustReleaseBounded(): Int

  unique function field_MustReleaseUnbounded(): Int

  unique function field_Clazz_x(): Int

  unique function field_Clazz_y(): Int

  function predicate_MustTerminate(r: Ref): Int

  function predicate_MustInvokeBounded(r: Ref): Int

  function predicate_MustInvokeUnbounded(r: Ref): Int

  function predicate_MustInvokeCredit(r: Ref): Int

  function predicate__MaySet(rec: Ref, id: Int): Int

  axiom ARP_MustTerminate__val {
    (forall r: Ref :: { predicate_MustTerminate(r) } predicate_MustTerminate(r) != field__val())
  }

  axiom ARP_MustTerminate___container {
    (forall r: Ref :: { predicate_MustTerminate(r) } predicate_MustTerminate(r) != field___container())
  }

  axiom ARP_MustTerminate___iter_index {
    (forall r: Ref :: { predicate_MustTerminate(r) } predicate_MustTerminate(r) != field___iter_index())
  }

  axiom ARP_MustTerminate___previous {
    (forall r: Ref :: { predicate_MustTerminate(r) } predicate_MustTerminate(r) != field___previous())
  }

  axiom ARP_MustTerminate_list_acc {
    (forall r: Ref :: { predicate_MustTerminate(r) } predicate_MustTerminate(r) != field_list_acc())
  }

  axiom ARP_MustTerminate_set_acc {
    (forall r: Ref :: { predicate_MustTerminate(r) } predicate_MustTerminate(r) != field_set_acc())
  }

  axiom ARP_MustTerminate_dict_acc {
    (forall r: Ref :: { predicate_MustTerminate(r) } predicate_MustTerminate(r) != field_dict_acc())
  }

  axiom ARP_MustTerminate_Measure$acc {
    (forall r: Ref :: { predicate_MustTerminate(r) } predicate_MustTerminate(r) != field_Measure$acc())
  }

  axiom ARP_MustTerminate_MustReleaseBounded {
    (forall r: Ref :: { predicate_MustTerminate(r) } predicate_MustTerminate(r) != field_MustReleaseBounded())
  }

  axiom ARP_MustTerminate_MustReleaseUnbounded {
    (forall r: Ref :: { predicate_MustTerminate(r) } predicate_MustTerminate(r) != field_MustReleaseUnbounded())
  }

  axiom ARP_MustTerminate_Clazz_x {
    (forall r: Ref :: { predicate_MustTerminate(r) } predicate_MustTerminate(r) != field_Clazz_x())
  }

  axiom ARP_MustTerminate_Clazz_y {
    (forall r: Ref :: { predicate_MustTerminate(r) } predicate_MustTerminate(r) != field_Clazz_y())
  }

  axiom ARP_MustTerminate_MustInvokeBounded {
    (forall r: Ref, r_1: Ref :: { predicate_MustTerminate(r),predicate_MustInvokeBounded(r_1) } predicate_MustTerminate(r) != predicate_MustInvokeBounded(r_1))
  }

  axiom ARP_MustTerminate_MustInvokeUnbounded {
    (forall r: Ref, r_2: Ref :: { predicate_MustTerminate(r),predicate_MustInvokeUnbounded(r_2) } predicate_MustTerminate(r) != predicate_MustInvokeUnbounded(r_2))
  }

  axiom ARP_MustTerminate_MustInvokeCredit {
    (forall r: Ref, r_3: Ref :: { predicate_MustTerminate(r),predicate_MustInvokeCredit(r_3) } predicate_MustTerminate(r) != predicate_MustInvokeCredit(r_3))
  }

  axiom ARP_MustTerminate__MaySet {
    (forall r: Ref, rec_0: Ref, id_0: Int :: { predicate_MustTerminate(r),predicate__MaySet(rec_0, id_0) } predicate_MustTerminate(r) != predicate__MaySet(rec_0, id_0))
  }

  axiom ARP_MustTerminate {
    (forall r: Ref, r_0: Ref :: { predicate_MustTerminate(r),predicate_MustTerminate(r_0) } predicate_MustTerminate(r) == predicate_MustTerminate(r_0) ==> r == r_0)
  }

  axiom ARP_MustInvokeBounded__val {
    (forall r: Ref :: { predicate_MustInvokeBounded(r) } predicate_MustInvokeBounded(r) != field__val())
  }

  axiom ARP_MustInvokeBounded___container {
    (forall r: Ref :: { predicate_MustInvokeBounded(r) } predicate_MustInvokeBounded(r) != field___container())
  }

  axiom ARP_MustInvokeBounded___iter_index {
    (forall r: Ref :: { predicate_MustInvokeBounded(r) } predicate_MustInvokeBounded(r) != field___iter_index())
  }

  axiom ARP_MustInvokeBounded___previous {
    (forall r: Ref :: { predicate_MustInvokeBounded(r) } predicate_MustInvokeBounded(r) != field___previous())
  }

  axiom ARP_MustInvokeBounded_list_acc {
    (forall r: Ref :: { predicate_MustInvokeBounded(r) } predicate_MustInvokeBounded(r) != field_list_acc())
  }

  axiom ARP_MustInvokeBounded_set_acc {
    (forall r: Ref :: { predicate_MustInvokeBounded(r) } predicate_MustInvokeBounded(r) != field_set_acc())
  }

  axiom ARP_MustInvokeBounded_dict_acc {
    (forall r: Ref :: { predicate_MustInvokeBounded(r) } predicate_MustInvokeBounded(r) != field_dict_acc())
  }

  axiom ARP_MustInvokeBounded_Measure$acc {
    (forall r: Ref :: { predicate_MustInvokeBounded(r) } predicate_MustInvokeBounded(r) != field_Measure$acc())
  }

  axiom ARP_MustInvokeBounded_MustReleaseBounded {
    (forall r: Ref :: { predicate_MustInvokeBounded(r) } predicate_MustInvokeBounded(r) != field_MustReleaseBounded())
  }

  axiom ARP_MustInvokeBounded_MustReleaseUnbounded {
    (forall r: Ref :: { predicate_MustInvokeBounded(r) } predicate_MustInvokeBounded(r) != field_MustReleaseUnbounded())
  }

  axiom ARP_MustInvokeBounded_Clazz_x {
    (forall r: Ref :: { predicate_MustInvokeBounded(r) } predicate_MustInvokeBounded(r) != field_Clazz_x())
  }

  axiom ARP_MustInvokeBounded_Clazz_y {
    (forall r: Ref :: { predicate_MustInvokeBounded(r) } predicate_MustInvokeBounded(r) != field_Clazz_y())
  }

  axiom ARP_MustInvokeBounded_MustTerminate {
    (forall r: Ref, r_5: Ref :: { predicate_MustInvokeBounded(r),predicate_MustTerminate(r_5) } predicate_MustInvokeBounded(r) != predicate_MustTerminate(r_5))
  }

  axiom ARP_MustInvokeBounded_MustInvokeUnbounded {
    (forall r: Ref, r_6: Ref :: { predicate_MustInvokeBounded(r),predicate_MustInvokeUnbounded(r_6) } predicate_MustInvokeBounded(r) != predicate_MustInvokeUnbounded(r_6))
  }

  axiom ARP_MustInvokeBounded_MustInvokeCredit {
    (forall r: Ref, r_7: Ref :: { predicate_MustInvokeBounded(r),predicate_MustInvokeCredit(r_7) } predicate_MustInvokeBounded(r) != predicate_MustInvokeCredit(r_7))
  }

  axiom ARP_MustInvokeBounded__MaySet {
    (forall r: Ref, rec_1: Ref, id_1: Int :: { predicate_MustInvokeBounded(r),predicate__MaySet(rec_1, id_1) } predicate_MustInvokeBounded(r) != predicate__MaySet(rec_1, id_1))
  }

  axiom ARP_MustInvokeBounded {
    (forall r: Ref, r_4: Ref :: { predicate_MustInvokeBounded(r),predicate_MustInvokeBounded(r_4) } predicate_MustInvokeBounded(r) == predicate_MustInvokeBounded(r_4) ==> r == r_4)
  }

  axiom ARP_MustInvokeUnbounded__val {
    (forall r: Ref :: { predicate_MustInvokeUnbounded(r) } predicate_MustInvokeUnbounded(r) != field__val())
  }

  axiom ARP_MustInvokeUnbounded___container {
    (forall r: Ref :: { predicate_MustInvokeUnbounded(r) } predicate_MustInvokeUnbounded(r) != field___container())
  }

  axiom ARP_MustInvokeUnbounded___iter_index {
    (forall r: Ref :: { predicate_MustInvokeUnbounded(r) } predicate_MustInvokeUnbounded(r) != field___iter_index())
  }

  axiom ARP_MustInvokeUnbounded___previous {
    (forall r: Ref :: { predicate_MustInvokeUnbounded(r) } predicate_MustInvokeUnbounded(r) != field___previous())
  }

  axiom ARP_MustInvokeUnbounded_list_acc {
    (forall r: Ref :: { predicate_MustInvokeUnbounded(r) } predicate_MustInvokeUnbounded(r) != field_list_acc())
  }

  axiom ARP_MustInvokeUnbounded_set_acc {
    (forall r: Ref :: { predicate_MustInvokeUnbounded(r) } predicate_MustInvokeUnbounded(r) != field_set_acc())
  }

  axiom ARP_MustInvokeUnbounded_dict_acc {
    (forall r: Ref :: { predicate_MustInvokeUnbounded(r) } predicate_MustInvokeUnbounded(r) != field_dict_acc())
  }

  axiom ARP_MustInvokeUnbounded_Measure$acc {
    (forall r: Ref :: { predicate_MustInvokeUnbounded(r) } predicate_MustInvokeUnbounded(r) != field_Measure$acc())
  }

  axiom ARP_MustInvokeUnbounded_MustReleaseBounded {
    (forall r: Ref :: { predicate_MustInvokeUnbounded(r) } predicate_MustInvokeUnbounded(r) != field_MustReleaseBounded())
  }

  axiom ARP_MustInvokeUnbounded_MustReleaseUnbounded {
    (forall r: Ref :: { predicate_MustInvokeUnbounded(r) } predicate_MustInvokeUnbounded(r) != field_MustReleaseUnbounded())
  }

  axiom ARP_MustInvokeUnbounded_Clazz_x {
    (forall r: Ref :: { predicate_MustInvokeUnbounded(r) } predicate_MustInvokeUnbounded(r) != field_Clazz_x())
  }

  axiom ARP_MustInvokeUnbounded_Clazz_y {
    (forall r: Ref :: { predicate_MustInvokeUnbounded(r) } predicate_MustInvokeUnbounded(r) != field_Clazz_y())
  }

  axiom ARP_MustInvokeUnbounded_MustTerminate {
    (forall r: Ref, r_9: Ref :: { predicate_MustInvokeUnbounded(r),predicate_MustTerminate(r_9) } predicate_MustInvokeUnbounded(r) != predicate_MustTerminate(r_9))
  }

  axiom ARP_MustInvokeUnbounded_MustInvokeBounded {
    (forall r: Ref, r_10: Ref :: { predicate_MustInvokeUnbounded(r),predicate_MustInvokeBounded(r_10) } predicate_MustInvokeUnbounded(r) != predicate_MustInvokeBounded(r_10))
  }

  axiom ARP_MustInvokeUnbounded_MustInvokeCredit {
    (forall r: Ref, r_11: Ref :: { predicate_MustInvokeUnbounded(r),predicate_MustInvokeCredit(r_11) } predicate_MustInvokeUnbounded(r) != predicate_MustInvokeCredit(r_11))
  }

  axiom ARP_MustInvokeUnbounded__MaySet {
    (forall r: Ref, rec_2: Ref, id_2: Int :: { predicate_MustInvokeUnbounded(r),predicate__MaySet(rec_2, id_2) } predicate_MustInvokeUnbounded(r) != predicate__MaySet(rec_2, id_2))
  }

  axiom ARP_MustInvokeUnbounded {
    (forall r: Ref, r_8: Ref :: { predicate_MustInvokeUnbounded(r),predicate_MustInvokeUnbounded(r_8) } predicate_MustInvokeUnbounded(r) == predicate_MustInvokeUnbounded(r_8) ==> r == r_8)
  }

  axiom ARP_MustInvokeCredit__val {
    (forall r: Ref :: { predicate_MustInvokeCredit(r) } predicate_MustInvokeCredit(r) != field__val())
  }

  axiom ARP_MustInvokeCredit___container {
    (forall r: Ref :: { predicate_MustInvokeCredit(r) } predicate_MustInvokeCredit(r) != field___container())
  }

  axiom ARP_MustInvokeCredit___iter_index {
    (forall r: Ref :: { predicate_MustInvokeCredit(r) } predicate_MustInvokeCredit(r) != field___iter_index())
  }

  axiom ARP_MustInvokeCredit___previous {
    (forall r: Ref :: { predicate_MustInvokeCredit(r) } predicate_MustInvokeCredit(r) != field___previous())
  }

  axiom ARP_MustInvokeCredit_list_acc {
    (forall r: Ref :: { predicate_MustInvokeCredit(r) } predicate_MustInvokeCredit(r) != field_list_acc())
  }

  axiom ARP_MustInvokeCredit_set_acc {
    (forall r: Ref :: { predicate_MustInvokeCredit(r) } predicate_MustInvokeCredit(r) != field_set_acc())
  }

  axiom ARP_MustInvokeCredit_dict_acc {
    (forall r: Ref :: { predicate_MustInvokeCredit(r) } predicate_MustInvokeCredit(r) != field_dict_acc())
  }

  axiom ARP_MustInvokeCredit_Measure$acc {
    (forall r: Ref :: { predicate_MustInvokeCredit(r) } predicate_MustInvokeCredit(r) != field_Measure$acc())
  }

  axiom ARP_MustInvokeCredit_MustReleaseBounded {
    (forall r: Ref :: { predicate_MustInvokeCredit(r) } predicate_MustInvokeCredit(r) != field_MustReleaseBounded())
  }

  axiom ARP_MustInvokeCredit_MustReleaseUnbounded {
    (forall r: Ref :: { predicate_MustInvokeCredit(r) } predicate_MustInvokeCredit(r) != field_MustReleaseUnbounded())
  }

  axiom ARP_MustInvokeCredit_Clazz_x {
    (forall r: Ref :: { predicate_MustInvokeCredit(r) } predicate_MustInvokeCredit(r) != field_Clazz_x())
  }

  axiom ARP_MustInvokeCredit_Clazz_y {
    (forall r: Ref :: { predicate_MustInvokeCredit(r) } predicate_MustInvokeCredit(r) != field_Clazz_y())
  }

  axiom ARP_MustInvokeCredit_MustTerminate {
    (forall r: Ref, r_13: Ref :: { predicate_MustInvokeCredit(r),predicate_MustTerminate(r_13) } predicate_MustInvokeCredit(r) != predicate_MustTerminate(r_13))
  }

  axiom ARP_MustInvokeCredit_MustInvokeBounded {
    (forall r: Ref, r_14: Ref :: { predicate_MustInvokeCredit(r),predicate_MustInvokeBounded(r_14) } predicate_MustInvokeCredit(r) != predicate_MustInvokeBounded(r_14))
  }

  axiom ARP_MustInvokeCredit_MustInvokeUnbounded {
    (forall r: Ref, r_15: Ref :: { predicate_MustInvokeCredit(r),predicate_MustInvokeUnbounded(r_15) } predicate_MustInvokeCredit(r) != predicate_MustInvokeUnbounded(r_15))
  }

  axiom ARP_MustInvokeCredit__MaySet {
    (forall r: Ref, rec_3: Ref, id_3: Int :: { predicate_MustInvokeCredit(r),predicate__MaySet(rec_3, id_3) } predicate_MustInvokeCredit(r) != predicate__MaySet(rec_3, id_3))
  }

  axiom ARP_MustInvokeCredit {
    (forall r: Ref, r_12: Ref :: { predicate_MustInvokeCredit(r),predicate_MustInvokeCredit(r_12) } predicate_MustInvokeCredit(r) == predicate_MustInvokeCredit(r_12) ==> r == r_12)
  }

  axiom ARP__MaySet__val {
    (forall rec: Ref, id: Int :: { predicate__MaySet(rec, id) } predicate__MaySet(rec, id) != field__val())
  }

  axiom ARP__MaySet___container {
    (forall rec: Ref, id: Int :: { predicate__MaySet(rec, id) } predicate__MaySet(rec, id) != field___container())
  }

  axiom ARP__MaySet___iter_index {
    (forall rec: Ref, id: Int :: { predicate__MaySet(rec, id) } predicate__MaySet(rec, id) != field___iter_index())
  }

  axiom ARP__MaySet___previous {
    (forall rec: Ref, id: Int :: { predicate__MaySet(rec, id) } predicate__MaySet(rec, id) != field___previous())
  }

  axiom ARP__MaySet_list_acc {
    (forall rec: Ref, id: Int :: { predicate__MaySet(rec, id) } predicate__MaySet(rec, id) != field_list_acc())
  }

  axiom ARP__MaySet_set_acc {
    (forall rec: Ref, id: Int :: { predicate__MaySet(rec, id) } predicate__MaySet(rec, id) != field_set_acc())
  }

  axiom ARP__MaySet_dict_acc {
    (forall rec: Ref, id: Int :: { predicate__MaySet(rec, id) } predicate__MaySet(rec, id) != field_dict_acc())
  }

  axiom ARP__MaySet_Measure$acc {
    (forall rec: Ref, id: Int :: { predicate__MaySet(rec, id) } predicate__MaySet(rec, id) != field_Measure$acc())
  }

  axiom ARP__MaySet_MustReleaseBounded {
    (forall rec: Ref, id: Int :: { predicate__MaySet(rec, id) } predicate__MaySet(rec, id) != field_MustReleaseBounded())
  }

  axiom ARP__MaySet_MustReleaseUnbounded {
    (forall rec: Ref, id: Int :: { predicate__MaySet(rec, id) } predicate__MaySet(rec, id) != field_MustReleaseUnbounded())
  }

  axiom ARP__MaySet_Clazz_x {
    (forall rec: Ref, id: Int :: { predicate__MaySet(rec, id) } predicate__MaySet(rec, id) != field_Clazz_x())
  }

  axiom ARP__MaySet_Clazz_y {
    (forall rec: Ref, id: Int :: { predicate__MaySet(rec, id) } predicate__MaySet(rec, id) != field_Clazz_y())
  }

  axiom ARP__MaySet_MustTerminate {
    (forall rec: Ref, id: Int, r_16: Ref :: { predicate__MaySet(rec, id),predicate_MustTerminate(r_16) } predicate__MaySet(rec, id) != predicate_MustTerminate(r_16))
  }

  axiom ARP__MaySet_MustInvokeBounded {
    (forall rec: Ref, id: Int, r_17: Ref :: { predicate__MaySet(rec, id),predicate_MustInvokeBounded(r_17) } predicate__MaySet(rec, id) != predicate_MustInvokeBounded(r_17))
  }

  axiom ARP__MaySet_MustInvokeUnbounded {
    (forall rec: Ref, id: Int, r_18: Ref :: { predicate__MaySet(rec, id),predicate_MustInvokeUnbounded(r_18) } predicate__MaySet(rec, id) != predicate_MustInvokeUnbounded(r_18))
  }

  axiom ARP__MaySet_MustInvokeCredit {
    (forall rec: Ref, id: Int, r_19: Ref :: { predicate__MaySet(rec, id),predicate_MustInvokeCredit(r_19) } predicate__MaySet(rec, id) != predicate_MustInvokeCredit(r_19))
  }

  axiom ARP__MaySet {
    (forall rec: Ref, id: Int, rec_4: Ref, id_4: Int :: { predicate__MaySet(rec, id),predicate__MaySet(rec_4, id_4) } predicate__MaySet(rec, id) == predicate__MaySet(rec_4, id_4) ==> rec == rec_4 && id == id_4)
  }
}

field _val: Ref

field __container: Ref

field __iter_index: Int

field __previous: Ref

field list_acc: Seq[Ref]

field set_acc: Set[Ref]

field dict_acc: Set[Ref]

field Measure$acc: Seq[Ref]

field MustReleaseBounded: Int

field MustReleaseUnbounded: Int

field Clazz_x: Ref

field Clazz_y: Ref

function _isDefined(id: Int): Bool


function _checkDefined(val: Ref, id: Int): Ref
  requires _isDefined(id)
{
  val
}

function _asserting(val: Ref, ass: Bool): Ref
  requires ass
{
  val
}

function _int_to_bool(i: Int): Bool


function __file__(): Ref


function __name__(): Ref


function __prim__int___box__(prim: Int): Ref
  ensures typeof(result) == int()
  ensures int___unbox__(result) == prim
  ensures (forall other: Int :: { __prim__int___box__(other) } (__prim__int___box__(other) == result) == (other == prim))


function int___unbox__(box: Ref): Int
  requires issubtype(typeof(box), int())
  ensures !issubtype(typeof(box), bool()) ==> __prim__int___box__(result) == box
  ensures issubtype(typeof(box), bool()) ==> __prim__bool___box__(result != 0) == box


function __prim__bool___box__(prim: Bool): Ref
  ensures typeof(result) == bool()
  ensures bool___unbox__(result) == prim
  ensures int___unbox__(result) == (prim ? 1 : 0)


function bool___unbox__(box: Ref): Bool
  requires issubtype(typeof(box), bool())
  ensures __prim__bool___box__(result) == box


function object___eq__(self: Ref, other: Ref): Bool
  ensures self == other ==> result
  ensures (self == null) != (other == null) ==> !result


function Level(r: Ref): Perm


function str___len__(self: Ref): Int
  ensures result >= 0


function str___val__(self: Ref): Int


function str___create__(len: Int, value: Int): Ref
  ensures str___len__(result) == len
  ensures str___val__(result) == value
  ensures typeof(result) == str()


function str___eq__(self: Ref, other: Ref): Bool
  requires issubtype(typeof(self), str())
  ensures (str___val__(self) == str___val__(other)) == result
  ensures result ==> str___len__(self) == str___len__(other)


function rd(): Perm
  requires false


function rdc(): Perm
  requires false


function rdw(): Perm
  requires false


function globalRd(): Perm
  ensures none < result && result < write


function epsilonRd(): Perm
  ensures none < result && result < write


predicate MustTerminate(r: Ref)

predicate MustInvokeBounded(r: Ref)

predicate MustInvokeUnbounded(r: Ref)

predicate MustInvokeCredit(r: Ref)

predicate _MaySet(rec: Ref, id: Int)

method Clazz___init__(_cthread_116: Ref, _caller_measures_116: Seq[Measure$], _residue_116: Perm, self: Ref, Clazz___init___rd: Perm) returns (_current_wait_level_116: Perm)
{
  var self_6: Ref
  var _cwl_116: Perm
  var _method_measures_116: Seq[Measure$]
  var Clazz___init___log: ARPLog
  Clazz___init___log := ARPLog_Nil()
  inhale none < Clazz___init___rd
  inhale Clazz___init___rd < write
  inhale _cthread_116 != null
  inhale issubtype(typeof(_cthread_116), Thread())
  inhale self != null
  inhale acc(_MaySet(self, 4443106262936097725), write)
  Clazz___init___log := ARPLog_Cons(null, predicate__MaySet(self, 4443106262936097725), write, 6, Clazz___init___log)
  inhale acc(_MaySet(self, 4443387737912808381), write)
  Clazz___init___log := ARPLog_Cons(null, predicate__MaySet(self, 4443387737912808381), write, 6, Clazz___init___log)
  inhale issubtype(typeof(self), Clazz())
  inhale self != null
  inhale true
  label Clazz___init___start_label
  _method_measures_116 := Seq[Measure$]()
  inhale typeof(self) == Clazz()
  self_6 := self
  if (perm(_MaySet(self_6, 4443106262936097725)) > none) {
    label ARP_exhale_label
    Clazz___init___log := ARPLog_Cons(null, predicate__MaySet(self_6, 4443106262936097725), -write, 6, Clazz___init___log)
    exhale acc(_MaySet(self_6, old[ARP_exhale_label](4443106262936097725)), write)
    inhale acc(self_6.Clazz_x, write)
    Clazz___init___log := ARPLog_Cons(self_6, field_Clazz_x(), write, 6, Clazz___init___log)
  }
  self_6.Clazz_x := __prim__int___box__(5)
  if (perm(_MaySet(self_6, 4443387737912808381)) > none) {
    label ARP_0_exhale_label
    Clazz___init___log := ARPLog_Cons(null, predicate__MaySet(self_6, 4443387737912808381), -write, 6, Clazz___init___log)
    exhale acc(_MaySet(self_6, old[ARP_0_exhale_label](4443387737912808381)), write)
    inhale acc(self_6.Clazz_y, write)
    Clazz___init___log := ARPLog_Cons(self_6, field_Clazz_y(), write, 6, Clazz___init___log)
  }
  self_6.Clazz_y := __prim__int___box__(3)
  goto __end
  label __end
  label Clazz___init___end_label
  label ARP_1_exhale_label
  exhale old[Clazz___init___end_label](true)
  label ARP_2_exhale_label
  exhale acc(self.Clazz_x, write)
  exhale old[Clazz___init___end_label](issubtype(typeof(self.Clazz_x), int()))
  label ARP_3_exhale_label
  exhale acc(self.Clazz_y, write)
  exhale old[Clazz___init___end_label](issubtype(typeof(self.Clazz_y), int()))
  label ARP_4_exhale_label
  exhale (forperm [MustInvokeBounded] _r_0 :: false)
  exhale (forperm [MustInvokeUnbounded] _r_0 :: false)
  exhale (forperm [MustReleaseBounded] _r_0 :: false)
  exhale (forperm [MustReleaseUnbounded] _r_0 :: false)
}

method Clazz_m1(_cthread_117: Ref, _caller_measures_117: Seq[Measure$], _residue_117: Perm, self_0: Ref, Clazz_m1_rd: Perm) returns (_current_wait_level_117: Perm)
{
  var self_7: Ref
  var _cwl_117: Perm
  var _method_measures_117: Seq[Measure$]
  var Clazz_m1_log: ARPLog
  Clazz_m1_log := ARPLog_Nil()
  inhale none < Clazz_m1_rd
  inhale Clazz_m1_rd < write
  inhale _cthread_117 != null
  inhale issubtype(typeof(_cthread_117), Thread())
  inhale issubtype(typeof(self_0), Clazz())
  inhale self_0 != null
  inhale !object___eq__(self_0, null)
  inhale acc(self_0.Clazz_y, write)
  Clazz_m1_log := ARPLog_Cons(self_0, field_Clazz_y(), write, 6, Clazz_m1_log)
  inhale issubtype(typeof(self_0.Clazz_y), int())
  inhale acc(self_0.Clazz_x, Clazz_m1_rd)
  inhale none < Clazz_m1_rd
  Clazz_m1_log := ARPLog_Cons(self_0, field_Clazz_x(), Clazz_m1_rd, 4, Clazz_m1_log)
  inhale issubtype(typeof(self_0.Clazz_x), int())
  inhale true
  label Clazz_m1_start_label
  _method_measures_117 := Seq[Measure$]()
  inhale typeof(self_0) == Clazz()
  self_7 := self_0
  if (perm(_MaySet(self_7, 4443387737912808381)) > none) {
    label ARP_5_exhale_label
    Clazz_m1_log := ARPLog_Cons(null, predicate__MaySet(self_7, 4443387737912808381), -write, 6, Clazz_m1_log)
    exhale acc(_MaySet(self_7, old[ARP_5_exhale_label](4443387737912808381)), write)
    inhale acc(self_7.Clazz_y, write)
    Clazz_m1_log := ARPLog_Cons(self_7, field_Clazz_y(), write, 6, Clazz_m1_log)
  }
  self_7.Clazz_y := __prim__int___box__(int___unbox__(self_7.Clazz_x) + 1)
  goto __end
  label __end
  label Clazz_m1_end_label
  label ARP_6_exhale_label
  exhale old[Clazz_m1_end_label](true)
  label ARP_7_exhale_label
  exhale acc(self_0.Clazz_y, write)
  exhale old[Clazz_m1_end_label](issubtype(typeof(self_0.Clazz_y), int()))
  exhale acc(self_0.Clazz_x, Clazz_m1_rd)
  exhale old[Clazz_m1_end_label](issubtype(typeof(self_0.Clazz_x), int()) && int___unbox__(self_0.Clazz_y) == int___unbox__(self_0.Clazz_x) + 1)
  label ARP_8_exhale_label
  exhale (forperm [MustInvokeBounded] _r_3 :: false)
  exhale (forperm [MustInvokeUnbounded] _r_3 :: false)
  exhale (forperm [MustReleaseBounded] _r_3 :: false)
  exhale (forperm [MustReleaseUnbounded] _r_3 :: false)
}

method Clazz_m1_1(_cthread_118: Ref, _caller_measures_118: Seq[Measure$], _residue_118: Perm, self_1: Ref, Clazz_m1_1_rd: Perm) returns (_current_wait_level_118: Perm)
{
  var self_8: Ref
  var _cwl_118: Perm
  var _method_measures_118: Seq[Measure$]
  var Clazz_m1_1_log: ARPLog
  Clazz_m1_1_log := ARPLog_Nil()
  inhale none < Clazz_m1_1_rd
  inhale Clazz_m1_1_rd < write
  inhale _cthread_118 != null
  inhale issubtype(typeof(_cthread_118), Thread())
  inhale issubtype(typeof(self_1), Clazz())
  inhale self_1 != null
  inhale !object___eq__(self_1, null)
  inhale acc(self_1.Clazz_y, write)
  Clazz_m1_1_log := ARPLog_Cons(self_1, field_Clazz_y(), write, 6, Clazz_m1_1_log)
  inhale issubtype(typeof(self_1.Clazz_y), int())
  inhale acc(self_1.Clazz_x, Clazz_m1_1_rd + 1 / 2)
  inhale Clazz_m1_1_rd < 1 / 2 && (none < 1 / 2 ? none < 1 / 2 : none == 1 / 2 ==> none < Clazz_m1_1_rd)
  Clazz_m1_1_log := ARPLog_Cons(self_1, field_Clazz_x(), 1 / 2, 6, Clazz_m1_1_log)
  Clazz_m1_1_log := ARPLog_Cons(self_1, field_Clazz_x(), Clazz_m1_1_rd, 4, Clazz_m1_1_log)
  inhale issubtype(typeof(self_1.Clazz_x), int())
  inhale true
  label Clazz_m1_1_start_label
  _method_measures_118 := Seq[Measure$]()
  inhale typeof(self_1) == Clazz()
  self_8 := self_1
  if (perm(_MaySet(self_8, 4443387737912808381)) > none) {
    label ARP_9_exhale_label
    Clazz_m1_1_log := ARPLog_Cons(null, predicate__MaySet(self_8, 4443387737912808381), -write, 6, Clazz_m1_1_log)
    exhale acc(_MaySet(self_8, old[ARP_9_exhale_label](4443387737912808381)), write)
    inhale acc(self_8.Clazz_y, write)
    Clazz_m1_1_log := ARPLog_Cons(self_8, field_Clazz_y(), write, 6, Clazz_m1_1_log)
  }
  self_8.Clazz_y := __prim__int___box__(int___unbox__(self_8.Clazz_x) + 1)
  goto __end
  label __end
  label Clazz_m1_1_end_label
  label ARP_10_exhale_label
  exhale old[Clazz_m1_1_end_label](true)
  label ARP_11_exhale_label
  exhale acc(self_1.Clazz_y, write)
  exhale old[Clazz_m1_1_end_label](issubtype(typeof(self_1.Clazz_y), int()))
  exhale acc(self_1.Clazz_x, Clazz_m1_1_rd + 1 / 2)
  exhale old[Clazz_m1_1_end_label](issubtype(typeof(self_1.Clazz_x), int()) && int___unbox__(self_1.Clazz_y) == int___unbox__(self_1.Clazz_x) + 1)
  label ARP_12_exhale_label
  exhale (forperm [MustInvokeBounded] _r_6 :: false)
  exhale (forperm [MustInvokeUnbounded] _r_6 :: false)
  exhale (forperm [MustReleaseBounded] _r_6 :: false)
  exhale (forperm [MustReleaseUnbounded] _r_6 :: false)
}

method Clazz_m1_2(_cthread_119: Ref, _caller_measures_119: Seq[Measure$], _residue_119: Perm, self_2: Ref, Clazz_m1_2_rd: Perm) returns (_current_wait_level_119: Perm)
{
  var self_9: Ref
  var _cwl_119: Perm
  var _method_measures_119: Seq[Measure$]
  var Clazz_m1_2_log: ARPLog
  Clazz_m1_2_log := ARPLog_Nil()
  inhale none < Clazz_m1_2_rd
  inhale Clazz_m1_2_rd < write
  inhale _cthread_119 != null
  inhale issubtype(typeof(_cthread_119), Thread())
  inhale issubtype(typeof(self_2), Clazz())
  inhale self_2 != null
  inhale !object___eq__(self_2, null)
  inhale acc(self_2.Clazz_y, write)
  Clazz_m1_2_log := ARPLog_Cons(self_2, field_Clazz_y(), write, 6, Clazz_m1_2_log)
  inhale issubtype(typeof(self_2.Clazz_y), int())
  inhale acc(self_2.Clazz_x, 1 / 2 + Clazz_m1_2_rd)
  inhale Clazz_m1_2_rd < 1 / 2 && (none < 1 / 2 ? none < 1 / 2 : none == 1 / 2 ==> none < Clazz_m1_2_rd)
  Clazz_m1_2_log := ARPLog_Cons(self_2, field_Clazz_x(), 1 / 2, 6, Clazz_m1_2_log)
  Clazz_m1_2_log := ARPLog_Cons(self_2, field_Clazz_x(), Clazz_m1_2_rd, 4, Clazz_m1_2_log)
  inhale issubtype(typeof(self_2.Clazz_x), int())
  inhale true
  label Clazz_m1_2_start_label
  _method_measures_119 := Seq[Measure$]()
  inhale typeof(self_2) == Clazz()
  self_9 := self_2
  if (perm(_MaySet(self_9, 4443387737912808381)) > none) {
    label ARP_13_exhale_label
    Clazz_m1_2_log := ARPLog_Cons(null, predicate__MaySet(self_9, 4443387737912808381), -write, 6, Clazz_m1_2_log)
    exhale acc(_MaySet(self_9, old[ARP_13_exhale_label](4443387737912808381)), write)
    inhale acc(self_9.Clazz_y, write)
    Clazz_m1_2_log := ARPLog_Cons(self_9, field_Clazz_y(), write, 6, Clazz_m1_2_log)
  }
  self_9.Clazz_y := __prim__int___box__(int___unbox__(self_9.Clazz_x) + 1)
  goto __end
  label __end
  label Clazz_m1_2_end_label
  label ARP_14_exhale_label
  exhale old[Clazz_m1_2_end_label](true)
  label ARP_15_exhale_label
  exhale acc(self_2.Clazz_y, write)
  exhale old[Clazz_m1_2_end_label](issubtype(typeof(self_2.Clazz_y), int()))
  exhale acc(self_2.Clazz_x, 1 / 2 + Clazz_m1_2_rd)
  exhale old[Clazz_m1_2_end_label](issubtype(typeof(self_2.Clazz_x), int()) && int___unbox__(self_2.Clazz_y) == int___unbox__(self_2.Clazz_x) + 1)
  label ARP_16_exhale_label
  exhale (forperm [MustInvokeBounded] _r_9 :: false)
  exhale (forperm [MustInvokeUnbounded] _r_9 :: false)
  exhale (forperm [MustReleaseBounded] _r_9 :: false)
  exhale (forperm [MustReleaseUnbounded] _r_9 :: false)
}

method Clazz_m1_3(_cthread_120: Ref, _caller_measures_120: Seq[Measure$], _residue_120: Perm, self_3: Ref, Clazz_m1_3_rd: Perm) returns (_current_wait_level_120: Perm)
{
  var self_10: Ref
  var _cwl_120: Perm
  var _method_measures_120: Seq[Measure$]
  var Clazz_m1_3_log: ARPLog
  Clazz_m1_3_log := ARPLog_Nil()
  inhale none < Clazz_m1_3_rd
  inhale Clazz_m1_3_rd < write
  inhale _cthread_120 != null
  inhale issubtype(typeof(_cthread_120), Thread())
  inhale issubtype(typeof(self_3), Clazz())
  inhale self_3 != null
  inhale !object___eq__(self_3, null)
  inhale acc(self_3.Clazz_y, write)
  Clazz_m1_3_log := ARPLog_Cons(self_3, field_Clazz_y(), write, 6, Clazz_m1_3_log)
  inhale issubtype(typeof(self_3.Clazz_y), int())
  inhale acc(self_3.Clazz_x, 1 / 2 - Clazz_m1_3_rd)
  inhale Clazz_m1_3_rd < 1 / 2 && (none < 1 / 2 ==> none < -1 * Clazz_m1_3_rd + 1 / 2)
  Clazz_m1_3_log := ARPLog_Cons(self_3, field_Clazz_x(), 1 / 2, 6, Clazz_m1_3_log)
  Clazz_m1_3_log := ARPLog_Cons(self_3, field_Clazz_x(), -1 * Clazz_m1_3_rd, 4, Clazz_m1_3_log)
  inhale issubtype(typeof(self_3.Clazz_x), int())
  inhale true
  label Clazz_m1_3_start_label
  _method_measures_120 := Seq[Measure$]()
  inhale typeof(self_3) == Clazz()
  self_10 := self_3
  if (perm(_MaySet(self_10, 4443387737912808381)) > none) {
    label ARP_17_exhale_label
    Clazz_m1_3_log := ARPLog_Cons(null, predicate__MaySet(self_10, 4443387737912808381), -write, 6, Clazz_m1_3_log)
    exhale acc(_MaySet(self_10, old[ARP_17_exhale_label](4443387737912808381)), write)
    inhale acc(self_10.Clazz_y, write)
    Clazz_m1_3_log := ARPLog_Cons(self_10, field_Clazz_y(), write, 6, Clazz_m1_3_log)
  }
  self_10.Clazz_y := __prim__int___box__(int___unbox__(self_10.Clazz_x) + 1)
  goto __end
  label __end
  label Clazz_m1_3_end_label
  label ARP_18_exhale_label
  exhale old[Clazz_m1_3_end_label](true)
  label ARP_19_exhale_label
  exhale acc(self_3.Clazz_y, write)
  exhale old[Clazz_m1_3_end_label](issubtype(typeof(self_3.Clazz_y), int()))
  exhale acc(self_3.Clazz_x, 1 / 2 - Clazz_m1_3_rd)
  exhale old[Clazz_m1_3_end_label](issubtype(typeof(self_3.Clazz_x), int()) && int___unbox__(self_3.Clazz_y) == int___unbox__(self_3.Clazz_x) + 1)
  label ARP_20_exhale_label
  exhale (forperm [MustInvokeBounded] _r_12 :: false)
  exhale (forperm [MustInvokeUnbounded] _r_12 :: false)
  exhale (forperm [MustReleaseBounded] _r_12 :: false)
  exhale (forperm [MustReleaseUnbounded] _r_12 :: false)
}

method Clazz_m1_4(_cthread_121: Ref, _caller_measures_121: Seq[Measure$], _residue_121: Perm, self_4: Ref, Clazz_m1_4_rd: Perm) returns (_current_wait_level_121: Perm)
{
  var self_11: Ref
  var _cwl_121: Perm
  var _method_measures_121: Seq[Measure$]
  var Clazz_m1_4_log: ARPLog
  Clazz_m1_4_log := ARPLog_Nil()
  inhale none < Clazz_m1_4_rd
  inhale Clazz_m1_4_rd < write
  inhale _cthread_121 != null
  inhale issubtype(typeof(_cthread_121), Thread())
  inhale issubtype(typeof(self_4), Clazz())
  inhale self_4 != null
  inhale !object___eq__(self_4, null)
  inhale acc(self_4.Clazz_y, write)
  Clazz_m1_4_log := ARPLog_Cons(self_4, field_Clazz_y(), write, 6, Clazz_m1_4_log)
  inhale issubtype(typeof(self_4.Clazz_y), int())
  inhale acc(self_4.Clazz_x, 2 * Clazz_m1_4_rd)
  inhale none < 2 * Clazz_m1_4_rd
  Clazz_m1_4_log := ARPLog_Cons(self_4, field_Clazz_x(), 2 * Clazz_m1_4_rd, 4, Clazz_m1_4_log)
  inhale issubtype(typeof(self_4.Clazz_x), int())
  inhale true
  label Clazz_m1_4_start_label
  _method_measures_121 := Seq[Measure$]()
  inhale typeof(self_4) == Clazz()
  self_11 := self_4
  if (perm(_MaySet(self_11, 4443387737912808381)) > none) {
    label ARP_21_exhale_label
    Clazz_m1_4_log := ARPLog_Cons(null, predicate__MaySet(self_11, 4443387737912808381), -write, 6, Clazz_m1_4_log)
    exhale acc(_MaySet(self_11, old[ARP_21_exhale_label](4443387737912808381)), write)
    inhale acc(self_11.Clazz_y, write)
    Clazz_m1_4_log := ARPLog_Cons(self_11, field_Clazz_y(), write, 6, Clazz_m1_4_log)
  }
  self_11.Clazz_y := __prim__int___box__(int___unbox__(self_11.Clazz_x) + 1)
  goto __end
  label __end
  label Clazz_m1_4_end_label
  label ARP_22_exhale_label
  exhale old[Clazz_m1_4_end_label](true)
  label ARP_23_exhale_label
  exhale acc(self_4.Clazz_y, write)
  exhale old[Clazz_m1_4_end_label](issubtype(typeof(self_4.Clazz_y), int()))
  exhale acc(self_4.Clazz_x, 2 * Clazz_m1_4_rd)
  exhale old[Clazz_m1_4_end_label](issubtype(typeof(self_4.Clazz_x), int()) && int___unbox__(self_4.Clazz_y) == int___unbox__(self_4.Clazz_x) + 1)
  label ARP_24_exhale_label
  exhale (forperm [MustInvokeBounded] _r_15 :: false)
  exhale (forperm [MustInvokeUnbounded] _r_15 :: false)
  exhale (forperm [MustReleaseBounded] _r_15 :: false)
  exhale (forperm [MustReleaseUnbounded] _r_15 :: false)
}

method Clazz_m2(_cthread_122: Ref, _caller_measures_122: Seq[Measure$], _residue_122: Perm, self_5: Ref, Clazz_m2_rd: Perm) returns (_current_wait_level_122: Perm)
{
  var self_12: Ref
  var _cwl_122: Perm
  var _method_measures_122: Seq[Measure$]
  var Clazz_m2_log: ARPLog
  Clazz_m2_log := ARPLog_Nil()
  inhale none < Clazz_m2_rd
  inhale Clazz_m2_rd < write
  inhale _cthread_122 != null
  inhale issubtype(typeof(_cthread_122), Thread())
  inhale issubtype(typeof(self_5), Clazz())
  inhale self_5 != null
  inhale !object___eq__(self_5, null)
  inhale acc(self_5.Clazz_y, write)
  Clazz_m2_log := ARPLog_Cons(self_5, field_Clazz_y(), write, 6, Clazz_m2_log)
  inhale issubtype(typeof(self_5.Clazz_y), int())
  inhale acc(self_5.Clazz_x, write)
  Clazz_m2_log := ARPLog_Cons(self_5, field_Clazz_x(), write, 6, Clazz_m2_log)
  inhale issubtype(typeof(self_5.Clazz_x), int())
  inhale int___unbox__(self_5.Clazz_x) == 5
  inhale true
  label Clazz_m2_start_label
  _method_measures_122 := Seq[Measure$]()
  inhale typeof(self_5) == Clazz()
  self_12 := self_5
  if (perm(_MaySet(self_12, 4443387737912808381)) > none) {
    label ARP_25_exhale_label
    Clazz_m2_log := ARPLog_Cons(null, predicate__MaySet(self_12, 4443387737912808381), -write, 6, Clazz_m2_log)
    exhale acc(_MaySet(self_12, old[ARP_25_exhale_label](4443387737912808381)), write)
    inhale acc(self_12.Clazz_y, write)
    Clazz_m2_log := ARPLog_Cons(self_12, field_Clazz_y(), write, 6, Clazz_m2_log)
  }
  self_12.Clazz_y := __prim__int___box__(1)
  var Clazz_m1_call_rd: Perm
  var arg__cthread_117: Ref
  var arg__caller_measures_117: Seq[Measure$]
  var arg__residue_117: Perm
  var arg_self_0: Ref
  label Clazz_m1_call_label
  inhale none < Clazz_m1_call_rd
  inhale Clazz_m1_call_rd < write
  arg__cthread_117 := _cthread_122
  arg__caller_measures_117 := _method_measures_122
  arg__residue_117 := _residue_122
  arg_self_0 := self_12
  label ARP_26_exhale_label
  exhale old[Clazz_m1_call_label](arg__cthread_117 != null)
  label ARP_27_exhale_label
  exhale old[Clazz_m1_call_label](issubtype(typeof(arg__cthread_117), Thread()))
  label ARP_28_exhale_label
  exhale old[Clazz_m1_call_label](issubtype(typeof(arg_self_0), Clazz()))
  label ARP_29_exhale_label
  exhale old[Clazz_m1_call_label](arg_self_0 != null)
  label ARP_30_exhale_label
  exhale old[Clazz_m1_call_label](!object___eq__(arg_self_0, null))
  label ARP_31_exhale_label
  Clazz_m2_log := ARPLog_Cons(arg_self_0, field_Clazz_y(), -write, 6, Clazz_m2_log)
  exhale acc(arg_self_0.Clazz_y, write)
  exhale old[Clazz_m1_call_label](issubtype(typeof(arg_self_0.Clazz_y), int()))
  inhale old[ARP_31_exhale_label](none < ARPLog_sum_gt(arg_self_0, field_Clazz_x(), 1, Clazz_m2_log)) ==> Clazz_m1_call_rd < perm(arg_self_0.Clazz_x)
  Clazz_m2_log := ARPLog_Cons(arg_self_0, field_Clazz_x(), -Clazz_m1_call_rd, 1, Clazz_m2_log)
  exhale acc(arg_self_0.Clazz_x, Clazz_m1_call_rd)
  exhale old[Clazz_m1_call_label](issubtype(typeof(arg_self_0.Clazz_x), int()))
  label ARP_32_exhale_label
  exhale perm(MustTerminate(arg__cthread_117)) == old[Clazz_m1_call_label](none)
  exhale (forperm [MustInvokeBounded] _r_4 :: false)
  exhale (forperm [MustInvokeUnbounded] _r_4 :: false)
  exhale (forperm [MustReleaseBounded] _r_4 :: false)
  exhale (forperm [MustReleaseUnbounded] _r_4 :: false)
  _cwl_122 := HavocPerm()
  inhale (forperm [MustReleaseBounded, MustReleaseUnbounded] _r_2 :: Level(_r_2) <= _cwl_122)
  inhale arg__residue_117 <= _cwl_122
  inhale acc(arg_self_0.Clazz_y, write)
  Clazz_m2_log := ARPLog_Cons(arg_self_0, field_Clazz_y(), write, 6, Clazz_m2_log)
  inhale issubtype(typeof(arg_self_0.Clazz_y), int())
  inhale acc(arg_self_0.Clazz_x, Clazz_m1_call_rd)
  inhale none < Clazz_m1_call_rd
  Clazz_m2_log := ARPLog_Cons(arg_self_0, field_Clazz_x(), Clazz_m1_call_rd, 1, Clazz_m2_log)
  inhale issubtype(typeof(arg_self_0.Clazz_x), int())
  inhale int___unbox__(arg_self_0.Clazz_y) == int___unbox__(arg_self_0.Clazz_x) + 1
  inhale true
  assert int___unbox__(self_12.Clazz_y) == 6 && int___unbox__(self_12.Clazz_x) == 5
  if (perm(_MaySet(self_12, 4443387737912808381)) > none) {
    label ARP_33_exhale_label
    Clazz_m2_log := ARPLog_Cons(null, predicate__MaySet(self_12, 4443387737912808381), -write, 6, Clazz_m2_log)
    exhale acc(_MaySet(self_12, old[ARP_33_exhale_label](4443387737912808381)), write)
    inhale acc(self_12.Clazz_y, write)
    Clazz_m2_log := ARPLog_Cons(self_12, field_Clazz_y(), write, 6, Clazz_m2_log)
  }
  self_12.Clazz_y := __prim__int___box__(1)
  var Clazz_m1_1_call_rd: Perm
  var arg__cthread_118: Ref
  var arg__caller_measures_118: Seq[Measure$]
  var arg__residue_118: Perm
  var arg_self_1: Ref
  label Clazz_m1_1_call_label
  inhale none < Clazz_m1_1_call_rd
  inhale Clazz_m1_1_call_rd < write
  arg__cthread_118 := _cthread_122
  arg__caller_measures_118 := _method_measures_122
  arg__residue_118 := _residue_122
  arg_self_1 := self_12
  label ARP_34_exhale_label
  exhale old[Clazz_m1_1_call_label](arg__cthread_118 != null)
  label ARP_35_exhale_label
  exhale old[Clazz_m1_1_call_label](issubtype(typeof(arg__cthread_118), Thread()))
  label ARP_36_exhale_label
  exhale old[Clazz_m1_1_call_label](issubtype(typeof(arg_self_1), Clazz()))
  label ARP_37_exhale_label
  exhale old[Clazz_m1_1_call_label](arg_self_1 != null)
  label ARP_38_exhale_label
  exhale old[Clazz_m1_1_call_label](!object___eq__(arg_self_1, null))
  label ARP_39_exhale_label
  Clazz_m2_log := ARPLog_Cons(arg_self_1, field_Clazz_y(), -write, 6, Clazz_m2_log)
  exhale acc(arg_self_1.Clazz_y, write)
  exhale old[Clazz_m1_1_call_label](issubtype(typeof(arg_self_1.Clazz_y), int()))
  inhale old[ARP_39_exhale_label](Clazz_m1_1_call_rd < 1 / 2) && (old[ARP_39_exhale_label](none < ARPLog_sum_gt(arg_self_1, field_Clazz_x(), 1, Clazz_m2_log)) ==> old[ARP_39_exhale_label](none <= 1 / 2) ==> (old[ARP_39_exhale_label](1 / 2 < ARPLog_sum_gt(arg_self_1, field_Clazz_x(), 5, Clazz_m2_log)) ? old[ARP_39_exhale_label](1 / 2 + Clazz_m1_1_call_rd) < perm(arg_self_1.Clazz_x) : Clazz_m1_1_call_rd < perm(arg_self_1.Clazz_x)))
  Clazz_m2_log := ARPLog_Cons(arg_self_1, field_Clazz_x(), -(1 / 2), 6, Clazz_m2_log)
  Clazz_m2_log := ARPLog_Cons(arg_self_1, field_Clazz_x(), -Clazz_m1_1_call_rd, 1, Clazz_m2_log)
  exhale acc(arg_self_1.Clazz_x, Clazz_m1_1_call_rd + 1 / 2)
  exhale old[Clazz_m1_1_call_label](issubtype(typeof(arg_self_1.Clazz_x), int()))
  label ARP_40_exhale_label
  exhale perm(MustTerminate(arg__cthread_118)) == old[Clazz_m1_1_call_label](none)
  exhale (forperm [MustInvokeBounded] _r_7 :: false)
  exhale (forperm [MustInvokeUnbounded] _r_7 :: false)
  exhale (forperm [MustReleaseBounded] _r_7 :: false)
  exhale (forperm [MustReleaseUnbounded] _r_7 :: false)
  _cwl_122 := HavocPerm()
  inhale (forperm [MustReleaseBounded, MustReleaseUnbounded] _r_5 :: Level(_r_5) <= _cwl_122)
  inhale arg__residue_118 <= _cwl_122
  inhale acc(arg_self_1.Clazz_y, write)
  Clazz_m2_log := ARPLog_Cons(arg_self_1, field_Clazz_y(), write, 6, Clazz_m2_log)
  inhale issubtype(typeof(arg_self_1.Clazz_y), int())
  inhale acc(arg_self_1.Clazz_x, Clazz_m1_1_call_rd + 1 / 2)
  inhale Clazz_m1_1_call_rd < 1 / 2 && (none < 1 / 2 ? none < 1 / 2 : none == 1 / 2 ==> none < Clazz_m1_1_call_rd)
  Clazz_m2_log := ARPLog_Cons(arg_self_1, field_Clazz_x(), 1 / 2, 6, Clazz_m2_log)
  Clazz_m2_log := ARPLog_Cons(arg_self_1, field_Clazz_x(), Clazz_m1_1_call_rd, 1, Clazz_m2_log)
  inhale issubtype(typeof(arg_self_1.Clazz_x), int())
  inhale int___unbox__(arg_self_1.Clazz_y) == int___unbox__(arg_self_1.Clazz_x) + 1
  inhale true
  assert int___unbox__(self_12.Clazz_y) == 6 && int___unbox__(self_12.Clazz_x) == 5
  if (perm(_MaySet(self_12, 4443387737912808381)) > none) {
    label ARP_41_exhale_label
    Clazz_m2_log := ARPLog_Cons(null, predicate__MaySet(self_12, 4443387737912808381), -write, 6, Clazz_m2_log)
    exhale acc(_MaySet(self_12, old[ARP_41_exhale_label](4443387737912808381)), write)
    inhale acc(self_12.Clazz_y, write)
    Clazz_m2_log := ARPLog_Cons(self_12, field_Clazz_y(), write, 6, Clazz_m2_log)
  }
  self_12.Clazz_y := __prim__int___box__(1)
  var Clazz_m1_2_call_rd: Perm
  var arg__cthread_119: Ref
  var arg__caller_measures_119: Seq[Measure$]
  var arg__residue_119: Perm
  var arg_self_2: Ref
  label Clazz_m1_2_call_label
  inhale none < Clazz_m1_2_call_rd
  inhale Clazz_m1_2_call_rd < write
  arg__cthread_119 := _cthread_122
  arg__caller_measures_119 := _method_measures_122
  arg__residue_119 := _residue_122
  arg_self_2 := self_12
  label ARP_42_exhale_label
  exhale old[Clazz_m1_2_call_label](arg__cthread_119 != null)
  label ARP_43_exhale_label
  exhale old[Clazz_m1_2_call_label](issubtype(typeof(arg__cthread_119), Thread()))
  label ARP_44_exhale_label
  exhale old[Clazz_m1_2_call_label](issubtype(typeof(arg_self_2), Clazz()))
  label ARP_45_exhale_label
  exhale old[Clazz_m1_2_call_label](arg_self_2 != null)
  label ARP_46_exhale_label
  exhale old[Clazz_m1_2_call_label](!object___eq__(arg_self_2, null))
  label ARP_47_exhale_label
  Clazz_m2_log := ARPLog_Cons(arg_self_2, field_Clazz_y(), -write, 6, Clazz_m2_log)
  exhale acc(arg_self_2.Clazz_y, write)
  exhale old[Clazz_m1_2_call_label](issubtype(typeof(arg_self_2.Clazz_y), int()))
  inhale old[ARP_47_exhale_label](Clazz_m1_2_call_rd < 1 / 2) && (old[ARP_47_exhale_label](none < ARPLog_sum_gt(arg_self_2, field_Clazz_x(), 1, Clazz_m2_log)) ==> old[ARP_47_exhale_label](none <= 1 / 2) ==> (old[ARP_47_exhale_label](1 / 2 < ARPLog_sum_gt(arg_self_2, field_Clazz_x(), 5, Clazz_m2_log)) ? old[ARP_47_exhale_label](1 / 2 + Clazz_m1_2_call_rd) < perm(arg_self_2.Clazz_x) : Clazz_m1_2_call_rd < perm(arg_self_2.Clazz_x)))
  Clazz_m2_log := ARPLog_Cons(arg_self_2, field_Clazz_x(), -(1 / 2), 6, Clazz_m2_log)
  Clazz_m2_log := ARPLog_Cons(arg_self_2, field_Clazz_x(), -Clazz_m1_2_call_rd, 1, Clazz_m2_log)
  exhale acc(arg_self_2.Clazz_x, 1 / 2 + Clazz_m1_2_call_rd)
  exhale old[Clazz_m1_2_call_label](issubtype(typeof(arg_self_2.Clazz_x), int()))
  label ARP_48_exhale_label
  exhale perm(MustTerminate(arg__cthread_119)) == old[Clazz_m1_2_call_label](none)
  exhale (forperm [MustInvokeBounded] _r_10 :: false)
  exhale (forperm [MustInvokeUnbounded] _r_10 :: false)
  exhale (forperm [MustReleaseBounded] _r_10 :: false)
  exhale (forperm [MustReleaseUnbounded] _r_10 :: false)
  _cwl_122 := HavocPerm()
  inhale (forperm [MustReleaseBounded, MustReleaseUnbounded] _r_8 :: Level(_r_8) <= _cwl_122)
  inhale arg__residue_119 <= _cwl_122
  inhale acc(arg_self_2.Clazz_y, write)
  Clazz_m2_log := ARPLog_Cons(arg_self_2, field_Clazz_y(), write, 6, Clazz_m2_log)
  inhale issubtype(typeof(arg_self_2.Clazz_y), int())
  inhale acc(arg_self_2.Clazz_x, 1 / 2 + Clazz_m1_2_call_rd)
  inhale Clazz_m1_2_call_rd < 1 / 2 && (none < 1 / 2 ? none < 1 / 2 : none == 1 / 2 ==> none < Clazz_m1_2_call_rd)
  Clazz_m2_log := ARPLog_Cons(arg_self_2, field_Clazz_x(), 1 / 2, 6, Clazz_m2_log)
  Clazz_m2_log := ARPLog_Cons(arg_self_2, field_Clazz_x(), Clazz_m1_2_call_rd, 1, Clazz_m2_log)
  inhale issubtype(typeof(arg_self_2.Clazz_x), int())
  inhale int___unbox__(arg_self_2.Clazz_y) == int___unbox__(arg_self_2.Clazz_x) + 1
  inhale true
  assert int___unbox__(self_12.Clazz_y) == 6 && int___unbox__(self_12.Clazz_x) == 5
  if (perm(_MaySet(self_12, 4443387737912808381)) > none) {
    label ARP_49_exhale_label
    Clazz_m2_log := ARPLog_Cons(null, predicate__MaySet(self_12, 4443387737912808381), -write, 6, Clazz_m2_log)
    exhale acc(_MaySet(self_12, old[ARP_49_exhale_label](4443387737912808381)), write)
    inhale acc(self_12.Clazz_y, write)
    Clazz_m2_log := ARPLog_Cons(self_12, field_Clazz_y(), write, 6, Clazz_m2_log)
  }
  self_12.Clazz_y := __prim__int___box__(1)
  var Clazz_m1_3_call_rd: Perm
  var arg__cthread_120: Ref
  var arg__caller_measures_120: Seq[Measure$]
  var arg__residue_120: Perm
  var arg_self_3: Ref
  label Clazz_m1_3_call_label
  inhale none < Clazz_m1_3_call_rd
  inhale Clazz_m1_3_call_rd < write
  arg__cthread_120 := _cthread_122
  arg__caller_measures_120 := _method_measures_122
  arg__residue_120 := _residue_122
  arg_self_3 := self_12
  label ARP_50_exhale_label
  exhale old[Clazz_m1_3_call_label](arg__cthread_120 != null)
  label ARP_51_exhale_label
  exhale old[Clazz_m1_3_call_label](issubtype(typeof(arg__cthread_120), Thread()))
  label ARP_52_exhale_label
  exhale old[Clazz_m1_3_call_label](issubtype(typeof(arg_self_3), Clazz()))
  label ARP_53_exhale_label
  exhale old[Clazz_m1_3_call_label](arg_self_3 != null)
  label ARP_54_exhale_label
  exhale old[Clazz_m1_3_call_label](!object___eq__(arg_self_3, null))
  label ARP_55_exhale_label
  Clazz_m2_log := ARPLog_Cons(arg_self_3, field_Clazz_y(), -write, 6, Clazz_m2_log)
  exhale acc(arg_self_3.Clazz_y, write)
  exhale old[Clazz_m1_3_call_label](issubtype(typeof(arg_self_3.Clazz_y), int()))
  inhale old[ARP_55_exhale_label](Clazz_m1_3_call_rd < 1 / 2 && (none < 1 / 2 ==> none < 1 / 2 + -1 * Clazz_m1_3_call_rd))
  Clazz_m2_log := ARPLog_Cons(arg_self_3, field_Clazz_x(), -(1 / 2), 6, Clazz_m2_log)
  Clazz_m2_log := ARPLog_Cons(arg_self_3, field_Clazz_x(), -(-1 * Clazz_m1_3_call_rd), 1, Clazz_m2_log)
  exhale acc(arg_self_3.Clazz_x, 1 / 2 - Clazz_m1_3_call_rd)
  exhale old[Clazz_m1_3_call_label](issubtype(typeof(arg_self_3.Clazz_x), int()))
  label ARP_56_exhale_label
  exhale perm(MustTerminate(arg__cthread_120)) == old[Clazz_m1_3_call_label](none)
  exhale (forperm [MustInvokeBounded] _r_13 :: false)
  exhale (forperm [MustInvokeUnbounded] _r_13 :: false)
  exhale (forperm [MustReleaseBounded] _r_13 :: false)
  exhale (forperm [MustReleaseUnbounded] _r_13 :: false)
  _cwl_122 := HavocPerm()
  inhale (forperm [MustReleaseBounded, MustReleaseUnbounded] _r_11 :: Level(_r_11) <= _cwl_122)
  inhale arg__residue_120 <= _cwl_122
  inhale acc(arg_self_3.Clazz_y, write)
  Clazz_m2_log := ARPLog_Cons(arg_self_3, field_Clazz_y(), write, 6, Clazz_m2_log)
  inhale issubtype(typeof(arg_self_3.Clazz_y), int())
  inhale acc(arg_self_3.Clazz_x, 1 / 2 - Clazz_m1_3_call_rd)
  inhale Clazz_m1_3_call_rd < 1 / 2 && (none < 1 / 2 ==> none < -1 * Clazz_m1_3_call_rd + 1 / 2)
  Clazz_m2_log := ARPLog_Cons(arg_self_3, field_Clazz_x(), 1 / 2, 6, Clazz_m2_log)
  Clazz_m2_log := ARPLog_Cons(arg_self_3, field_Clazz_x(), -1 * Clazz_m1_3_call_rd, 1, Clazz_m2_log)
  inhale issubtype(typeof(arg_self_3.Clazz_x), int())
  inhale int___unbox__(arg_self_3.Clazz_y) == int___unbox__(arg_self_3.Clazz_x) + 1
  inhale true
  assert int___unbox__(self_12.Clazz_y) == 6 && int___unbox__(self_12.Clazz_x) == 5
  if (perm(_MaySet(self_12, 4443387737912808381)) > none) {
    label ARP_57_exhale_label
    Clazz_m2_log := ARPLog_Cons(null, predicate__MaySet(self_12, 4443387737912808381), -write, 6, Clazz_m2_log)
    exhale acc(_MaySet(self_12, old[ARP_57_exhale_label](4443387737912808381)), write)
    inhale acc(self_12.Clazz_y, write)
    Clazz_m2_log := ARPLog_Cons(self_12, field_Clazz_y(), write, 6, Clazz_m2_log)
  }
  self_12.Clazz_y := __prim__int___box__(1)
  var Clazz_m1_4_call_rd: Perm
  var arg__cthread_121: Ref
  var arg__caller_measures_121: Seq[Measure$]
  var arg__residue_121: Perm
  var arg_self_4: Ref
  label Clazz_m1_4_call_label
  inhale none < Clazz_m1_4_call_rd
  inhale Clazz_m1_4_call_rd < write
  arg__cthread_121 := _cthread_122
  arg__caller_measures_121 := _method_measures_122
  arg__residue_121 := _residue_122
  arg_self_4 := self_12
  label ARP_58_exhale_label
  exhale old[Clazz_m1_4_call_label](arg__cthread_121 != null)
  label ARP_59_exhale_label
  exhale old[Clazz_m1_4_call_label](issubtype(typeof(arg__cthread_121), Thread()))
  label ARP_60_exhale_label
  exhale old[Clazz_m1_4_call_label](issubtype(typeof(arg_self_4), Clazz()))
  label ARP_61_exhale_label
  exhale old[Clazz_m1_4_call_label](arg_self_4 != null)
  label ARP_62_exhale_label
  exhale old[Clazz_m1_4_call_label](!object___eq__(arg_self_4, null))
  label ARP_63_exhale_label
  Clazz_m2_log := ARPLog_Cons(arg_self_4, field_Clazz_y(), -write, 6, Clazz_m2_log)
  exhale acc(arg_self_4.Clazz_y, write)
  exhale old[Clazz_m1_4_call_label](issubtype(typeof(arg_self_4.Clazz_y), int()))
  inhale old[ARP_63_exhale_label](none < ARPLog_sum_gt(arg_self_4, field_Clazz_x(), 1, Clazz_m2_log)) ==> old[ARP_63_exhale_label](2 * Clazz_m1_4_call_rd) < perm(arg_self_4.Clazz_x)
  Clazz_m2_log := ARPLog_Cons(arg_self_4, field_Clazz_x(), -(2 * Clazz_m1_4_call_rd), 1, Clazz_m2_log)
  exhale acc(arg_self_4.Clazz_x, 2 * Clazz_m1_4_call_rd)
  exhale old[Clazz_m1_4_call_label](issubtype(typeof(arg_self_4.Clazz_x), int()))
  label ARP_64_exhale_label
  exhale perm(MustTerminate(arg__cthread_121)) == old[Clazz_m1_4_call_label](none)
  exhale (forperm [MustInvokeBounded] _r_16 :: false)
  exhale (forperm [MustInvokeUnbounded] _r_16 :: false)
  exhale (forperm [MustReleaseBounded] _r_16 :: false)
  exhale (forperm [MustReleaseUnbounded] _r_16 :: false)
  _cwl_122 := HavocPerm()
  inhale (forperm [MustReleaseBounded, MustReleaseUnbounded] _r_14 :: Level(_r_14) <= _cwl_122)
  inhale arg__residue_121 <= _cwl_122
  inhale acc(arg_self_4.Clazz_y, write)
  Clazz_m2_log := ARPLog_Cons(arg_self_4, field_Clazz_y(), write, 6, Clazz_m2_log)
  inhale issubtype(typeof(arg_self_4.Clazz_y), int())
  inhale acc(arg_self_4.Clazz_x, 2 * Clazz_m1_4_call_rd)
  inhale none < 2 * Clazz_m1_4_call_rd
  Clazz_m2_log := ARPLog_Cons(arg_self_4, field_Clazz_x(), 2 * Clazz_m1_4_call_rd, 1, Clazz_m2_log)
  inhale issubtype(typeof(arg_self_4.Clazz_x), int())
  inhale int___unbox__(arg_self_4.Clazz_y) == int___unbox__(arg_self_4.Clazz_x) + 1
  inhale true
  assert int___unbox__(self_12.Clazz_y) == 6 && int___unbox__(self_12.Clazz_x) == 5
  goto __end
  label __end
  label Clazz_m2_end_label
  label ARP_65_exhale_label
  exhale old[Clazz_m2_end_label](true)
  label ARP_66_exhale_label
  exhale acc(self_5.Clazz_y, write)
  exhale old[Clazz_m2_end_label](issubtype(typeof(self_5.Clazz_y), int()))
  exhale acc(self_5.Clazz_x, write)
  exhale old[Clazz_m2_end_label](issubtype(typeof(self_5.Clazz_x), int()) && (int___unbox__(self_5.Clazz_x) == 5 && int___unbox__(self_5.Clazz_y) == int___unbox__(self_5.Clazz_x) + 1))
  label ARP_67_exhale_label
  exhale (forperm [MustInvokeBounded] _r_18 :: false)
  exhale (forperm [MustInvokeUnbounded] _r_18 :: false)
  exhale (forperm [MustReleaseBounded] _r_18 :: false)
  exhale (forperm [MustReleaseUnbounded] _r_18 :: false)
}

method main(_cthread_123: Ref, _caller_measures_123: Seq[Measure$], _residue_123: Perm, main_rd: Perm) returns (_current_wait_level_123: Perm)
{
  var module_defined_0: Bool
  var module_names_0: Set[_Name]
  var _cwl_123: Perm
  var _method_measures_123: Seq[Measure$]
  var main_log: ARPLog
  main_log := ARPLog_Nil()
  inhale none < main_rd
  inhale main_rd < write
  inhale _cthread_123 != null
  inhale issubtype(typeof(_cthread_123), Thread())
  inhale true
  label main_start_label
  _method_measures_123 := Seq[Measure$]()
  module_defined_0 := true
  module_names_0 := Set[_Name]()
  module_names_0 := module_names_0 union Set(_single(3106082509126931487350218591))
  inhale acc(__file__()._val, 99 / 100)
  main_log := ARPLog_Cons(__file__(), field__val(), 99 / 100, 6, main_log)
  inhale issubtype(typeof(__file__()._val), str())
  inhale issubtype(typeof(__file__()._val), str())
  module_names_0 := module_names_0 union Set(_single(2489530350921051593165922143))
  inhale acc(__name__()._val, 99 / 100)
  main_log := ARPLog_Cons(__name__(), field__val(), 99 / 100, 6, main_log)
  inhale issubtype(typeof(__name__()._val), str())
  inhale issubtype(typeof(__name__()._val), str())
  inhale str___eq__(str___create__(8, 2489249333222104298408468319), __name__()._val)
  assert true
  module_names_0 := module_names_0 union Set(_single(3493880855485680332086796127))
  module_names_0 := module_names_0 union Set(_single(12653))
  module_names_0 := module_names_0 union Set(_single(828322157))
  module_names_0 := module_names_0 union Set(_single(845099373))
  module_names_0 := module_names_0 union Set(_single(861876589))
  module_names_0 := module_names_0 union Set(_single(878653805))
  module_names_0 := module_names_0 union Set(_single(12909))
  module_names_0 := module_names_0 union Set(_single(4409224812126180285))
  goto __end
  label __end
  label main_end_label
  label ARP_68_exhale_label
  exhale old[main_end_label](true)
  label ARP_69_exhale_label
  exhale (forperm [MustInvokeBounded] _r_21 :: false)
  exhale (forperm [MustInvokeUnbounded] _r_21 :: false)
  exhale (forperm [MustReleaseBounded] _r_21 :: false)
  exhale (forperm [MustReleaseUnbounded] _r_21 :: false)
}

method Clazz___init___contract_wellformed_dummy_method(_cthread_116: Ref, _caller_measures_116: Seq[Measure$], _residue_116: Perm, self: Ref) returns (_current_wait_level_116: Perm)
  requires _cthread_116 != null
  requires issubtype(typeof(_cthread_116), Thread())
  requires self != null
  requires acc(_MaySet(self, 4443106262936097725), write)
  requires acc(_MaySet(self, 4443387737912808381), write)
  requires issubtype(typeof(self), Clazz())
  requires self != null
  requires [true, perm(MustTerminate(_cthread_116)) == none && ((forperm [MustInvokeBounded] _r_1 :: false) && ((forperm [MustInvokeUnbounded] _r_1 :: false) && ((forperm [MustReleaseBounded] _r_1 :: false) && (forperm [MustReleaseUnbounded] _r_1 :: false))))]
  ensures [(forperm [MustReleaseBounded, MustReleaseUnbounded] _r :: Level(_r) <= _current_wait_level_116) && _residue_116 <= _current_wait_level_116, true]
  ensures acc(self.Clazz_x, write) && issubtype(typeof(self.Clazz_x), int())
  ensures acc(self.Clazz_y, write) && issubtype(typeof(self.Clazz_y), int())
  ensures [true, (forperm [MustInvokeBounded] _r_0 :: false) && ((forperm [MustInvokeUnbounded] _r_0 :: false) && ((forperm [MustReleaseBounded] _r_0 :: false) && (forperm [MustReleaseUnbounded] _r_0 :: false)))]


method Clazz_m1_contract_wellformed_dummy_method(_cthread_117: Ref, _caller_measures_117: Seq[Measure$], _residue_117: Perm, self_0: Ref) returns (_current_wait_level_117: Perm)
  requires _cthread_117 != null
  requires issubtype(typeof(_cthread_117), Thread())
  requires issubtype(typeof(self_0), Clazz())
  requires self_0 != null
  requires !object___eq__(self_0, null)
  requires acc(self_0.Clazz_y, write) && (issubtype(typeof(self_0.Clazz_y), int()) && (acc(self_0.Clazz_x, 1 / 2) && issubtype(typeof(self_0.Clazz_x), int())))
  requires [true, perm(MustTerminate(_cthread_117)) == none && ((forperm [MustInvokeBounded] _r_4 :: false) && ((forperm [MustInvokeUnbounded] _r_4 :: false) && ((forperm [MustReleaseBounded] _r_4 :: false) && (forperm [MustReleaseUnbounded] _r_4 :: false))))]
  ensures [(forperm [MustReleaseBounded, MustReleaseUnbounded] _r_2 :: Level(_r_2) <= _current_wait_level_117) && _residue_117 <= _current_wait_level_117, true]
  ensures acc(self_0.Clazz_y, write) && (issubtype(typeof(self_0.Clazz_y), int()) && (acc(self_0.Clazz_x, 1 / 2) && (issubtype(typeof(self_0.Clazz_x), int()) && int___unbox__(self_0.Clazz_y) == int___unbox__(self_0.Clazz_x) + 1)))
  ensures [true, (forperm [MustInvokeBounded] _r_3 :: false) && ((forperm [MustInvokeUnbounded] _r_3 :: false) && ((forperm [MustReleaseBounded] _r_3 :: false) && (forperm [MustReleaseUnbounded] _r_3 :: false)))]


method Clazz_m1_1_contract_wellformed_dummy_method(_cthread_118: Ref, _caller_measures_118: Seq[Measure$], _residue_118: Perm, self_1: Ref) returns (_current_wait_level_118: Perm)
  requires _cthread_118 != null
  requires issubtype(typeof(_cthread_118), Thread())
  requires issubtype(typeof(self_1), Clazz())
  requires self_1 != null
  requires !object___eq__(self_1, null)
  requires acc(self_1.Clazz_y, write) && (issubtype(typeof(self_1.Clazz_y), int()) && (acc(self_1.Clazz_x, 1 / 2) && issubtype(typeof(self_1.Clazz_x), int())))
  requires [true, perm(MustTerminate(_cthread_118)) == none && ((forperm [MustInvokeBounded] _r_7 :: false) && ((forperm [MustInvokeUnbounded] _r_7 :: false) && ((forperm [MustReleaseBounded] _r_7 :: false) && (forperm [MustReleaseUnbounded] _r_7 :: false))))]
  ensures [(forperm [MustReleaseBounded, MustReleaseUnbounded] _r_5 :: Level(_r_5) <= _current_wait_level_118) && _residue_118 <= _current_wait_level_118, true]
  ensures acc(self_1.Clazz_y, write) && (issubtype(typeof(self_1.Clazz_y), int()) && (acc(self_1.Clazz_x, 1 / 2) && (issubtype(typeof(self_1.Clazz_x), int()) && int___unbox__(self_1.Clazz_y) == int___unbox__(self_1.Clazz_x) + 1)))
  ensures [true, (forperm [MustInvokeBounded] _r_6 :: false) && ((forperm [MustInvokeUnbounded] _r_6 :: false) && ((forperm [MustReleaseBounded] _r_6 :: false) && (forperm [MustReleaseUnbounded] _r_6 :: false)))]


method Clazz_m1_2_contract_wellformed_dummy_method(_cthread_119: Ref, _caller_measures_119: Seq[Measure$], _residue_119: Perm, self_2: Ref) returns (_current_wait_level_119: Perm)
  requires _cthread_119 != null
  requires issubtype(typeof(_cthread_119), Thread())
  requires issubtype(typeof(self_2), Clazz())
  requires self_2 != null
  requires !object___eq__(self_2, null)
  requires acc(self_2.Clazz_y, write) && (issubtype(typeof(self_2.Clazz_y), int()) && (acc(self_2.Clazz_x, 1 / 2) && issubtype(typeof(self_2.Clazz_x), int())))
  requires [true, perm(MustTerminate(_cthread_119)) == none && ((forperm [MustInvokeBounded] _r_10 :: false) && ((forperm [MustInvokeUnbounded] _r_10 :: false) && ((forperm [MustReleaseBounded] _r_10 :: false) && (forperm [MustReleaseUnbounded] _r_10 :: false))))]
  ensures [(forperm [MustReleaseBounded, MustReleaseUnbounded] _r_8 :: Level(_r_8) <= _current_wait_level_119) && _residue_119 <= _current_wait_level_119, true]
  ensures acc(self_2.Clazz_y, write) && (issubtype(typeof(self_2.Clazz_y), int()) && (acc(self_2.Clazz_x, 1 / 2) && (issubtype(typeof(self_2.Clazz_x), int()) && int___unbox__(self_2.Clazz_y) == int___unbox__(self_2.Clazz_x) + 1)))
  ensures [true, (forperm [MustInvokeBounded] _r_9 :: false) && ((forperm [MustInvokeUnbounded] _r_9 :: false) && ((forperm [MustReleaseBounded] _r_9 :: false) && (forperm [MustReleaseUnbounded] _r_9 :: false)))]


method Clazz_m1_3_contract_wellformed_dummy_method(_cthread_120: Ref, _caller_measures_120: Seq[Measure$], _residue_120: Perm, self_3: Ref) returns (_current_wait_level_120: Perm)
  requires _cthread_120 != null
  requires issubtype(typeof(_cthread_120), Thread())
  requires issubtype(typeof(self_3), Clazz())
  requires self_3 != null
  requires !object___eq__(self_3, null)
  requires acc(self_3.Clazz_y, write) && (issubtype(typeof(self_3.Clazz_y), int()) && (acc(self_3.Clazz_x, 1 / 2) && issubtype(typeof(self_3.Clazz_x), int())))
  requires [true, perm(MustTerminate(_cthread_120)) == none && ((forperm [MustInvokeBounded] _r_13 :: false) && ((forperm [MustInvokeUnbounded] _r_13 :: false) && ((forperm [MustReleaseBounded] _r_13 :: false) && (forperm [MustReleaseUnbounded] _r_13 :: false))))]
  ensures [(forperm [MustReleaseBounded, MustReleaseUnbounded] _r_11 :: Level(_r_11) <= _current_wait_level_120) && _residue_120 <= _current_wait_level_120, true]
  ensures acc(self_3.Clazz_y, write) && (issubtype(typeof(self_3.Clazz_y), int()) && (acc(self_3.Clazz_x, 1 / 2) && (issubtype(typeof(self_3.Clazz_x), int()) && int___unbox__(self_3.Clazz_y) == int___unbox__(self_3.Clazz_x) + 1)))
  ensures [true, (forperm [MustInvokeBounded] _r_12 :: false) && ((forperm [MustInvokeUnbounded] _r_12 :: false) && ((forperm [MustReleaseBounded] _r_12 :: false) && (forperm [MustReleaseUnbounded] _r_12 :: false)))]


method Clazz_m1_4_contract_wellformed_dummy_method(_cthread_121: Ref, _caller_measures_121: Seq[Measure$], _residue_121: Perm, self_4: Ref) returns (_current_wait_level_121: Perm)
  requires _cthread_121 != null
  requires issubtype(typeof(_cthread_121), Thread())
  requires issubtype(typeof(self_4), Clazz())
  requires self_4 != null
  requires !object___eq__(self_4, null)
  requires acc(self_4.Clazz_y, write) && (issubtype(typeof(self_4.Clazz_y), int()) && (acc(self_4.Clazz_x, 1 / 2) && issubtype(typeof(self_4.Clazz_x), int())))
  requires [true, perm(MustTerminate(_cthread_121)) == none && ((forperm [MustInvokeBounded] _r_16 :: false) && ((forperm [MustInvokeUnbounded] _r_16 :: false) && ((forperm [MustReleaseBounded] _r_16 :: false) && (forperm [MustReleaseUnbounded] _r_16 :: false))))]
  ensures [(forperm [MustReleaseBounded, MustReleaseUnbounded] _r_14 :: Level(_r_14) <= _current_wait_level_121) && _residue_121 <= _current_wait_level_121, true]
  ensures acc(self_4.Clazz_y, write) && (issubtype(typeof(self_4.Clazz_y), int()) && (acc(self_4.Clazz_x, 1 / 2) && (issubtype(typeof(self_4.Clazz_x), int()) && int___unbox__(self_4.Clazz_y) == int___unbox__(self_4.Clazz_x) + 1)))
  ensures [true, (forperm [MustInvokeBounded] _r_15 :: false) && ((forperm [MustInvokeUnbounded] _r_15 :: false) && ((forperm [MustReleaseBounded] _r_15 :: false) && (forperm [MustReleaseUnbounded] _r_15 :: false)))]


method Clazz_m2_contract_wellformed_dummy_method(_cthread_122: Ref, _caller_measures_122: Seq[Measure$], _residue_122: Perm, self_5: Ref) returns (_current_wait_level_122: Perm)
  requires _cthread_122 != null
  requires issubtype(typeof(_cthread_122), Thread())
  requires issubtype(typeof(self_5), Clazz())
  requires self_5 != null
  requires !object___eq__(self_5, null)
  requires acc(self_5.Clazz_y, write) && (issubtype(typeof(self_5.Clazz_y), int()) && (acc(self_5.Clazz_x, write) && (issubtype(typeof(self_5.Clazz_x), int()) && int___unbox__(self_5.Clazz_x) == 5)))
  requires [true, perm(MustTerminate(_cthread_122)) == none && ((forperm [MustInvokeBounded] _r_19 :: false) && ((forperm [MustInvokeUnbounded] _r_19 :: false) && ((forperm [MustReleaseBounded] _r_19 :: false) && (forperm [MustReleaseUnbounded] _r_19 :: false))))]
  ensures [(forperm [MustReleaseBounded, MustReleaseUnbounded] _r_17 :: Level(_r_17) <= _current_wait_level_122) && _residue_122 <= _current_wait_level_122, true]
  ensures acc(self_5.Clazz_y, write) && (issubtype(typeof(self_5.Clazz_y), int()) && (acc(self_5.Clazz_x, write) && (issubtype(typeof(self_5.Clazz_x), int()) && (int___unbox__(self_5.Clazz_x) == 5 && int___unbox__(self_5.Clazz_y) == int___unbox__(self_5.Clazz_x) + 1))))
  ensures [true, (forperm [MustInvokeBounded] _r_18 :: false) && ((forperm [MustInvokeUnbounded] _r_18 :: false) && ((forperm [MustReleaseBounded] _r_18 :: false) && (forperm [MustReleaseUnbounded] _r_18 :: false)))]


method main_contract_wellformed_dummy_method(_cthread_123: Ref, _caller_measures_123: Seq[Measure$], _residue_123: Perm) returns (_current_wait_level_123: Perm)
  requires _cthread_123 != null
  requires issubtype(typeof(_cthread_123), Thread())
  requires [true, perm(MustTerminate(_cthread_123)) == none && ((forperm [MustInvokeBounded] _r_22 :: false) && ((forperm [MustInvokeUnbounded] _r_22 :: false) && ((forperm [MustReleaseBounded] _r_22 :: false) && (forperm [MustReleaseUnbounded] _r_22 :: false))))]
  ensures [(forperm [MustReleaseBounded, MustReleaseUnbounded] _r_20 :: Level(_r_20) <= _current_wait_level_123) && _residue_123 <= _current_wait_level_123, true]
  ensures [true, (forperm [MustInvokeBounded] _r_21 :: false) && ((forperm [MustInvokeUnbounded] _r_21 :: false) && ((forperm [MustReleaseBounded] _r_21 :: false) && (forperm [MustReleaseUnbounded] _r_21 :: false)))]


method HavocPerm() returns (returnval: Perm)


method HavocInt() returns (returnval_0: Int)


method HavocBool() returns (returnval_1: Bool)


method HavocRef() returns (returnval_2: Ref)
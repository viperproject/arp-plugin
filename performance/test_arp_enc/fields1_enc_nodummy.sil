domain ARPLog {

  function ARPLog_Nil(): ARPLog

  function ARPLog_Cons(arp_quant_ref: Ref, arp_quant_fieldId: Int, permission: Perm, arp_quant_level: Int, arp_quant_log: ARPLog): ARPLog

  function ARPLog_head_ref_Cons(arp_quant_log: ARPLog): Ref

  function ARPLog_head_fieldId_Cons(arp_quant_log: ARPLog): Int

  function ARPLog_head_permission_Cons(arp_quant_log: ARPLog): Perm

  function ARPLog_head_level_Cons(arp_quant_log: ARPLog): Int

  function ARPLog_tail_Cons(arp_quant_log: ARPLog): ARPLog

  function ARPLog_type(arp_quant_log: ARPLog): Int

  unique function ARPLog_type_Nil(): Int

  unique function ARPLog_type_Cons(): Int

  function ARPLog_is_Nil(arp_quant_log: ARPLog): Bool

  function ARPLog_is_Cons(arp_quant_log: ARPLog): Bool

  function ARPLog_max_level(arp_quant_log: ARPLog): Int

  function ARPLog_sum_gt(arp_quant_ref: Ref, arp_quant_fieldId: Int, arp_quant_level: Int, arp_quant_log: ARPLog): Perm

  function ARPLog_sum(arp_quant_ref: Ref, arp_quant_fieldId: Int, arp_quant_level: Int, arp_quant_log: ARPLog): Perm

  axiom ARPLog_destruct_over_construct_Cons {
    (forall arp_quant_head_ref: Ref, arp_quant_head_fieldId: Int, arp_quant_head_permission: Perm, arp_quant_head_level: Int, arp_quant_tail: ARPLog :: { ARPLog_Cons(arp_quant_head_ref, arp_quant_head_fieldId, arp_quant_head_permission, arp_quant_head_level, arp_quant_tail) } ARPLog_head_ref_Cons(ARPLog_Cons(arp_quant_head_ref, arp_quant_head_fieldId, arp_quant_head_permission, arp_quant_head_level, arp_quant_tail)) == arp_quant_head_ref && (ARPLog_head_fieldId_Cons(ARPLog_Cons(arp_quant_head_ref, arp_quant_head_fieldId, arp_quant_head_permission, arp_quant_head_level, arp_quant_tail)) == arp_quant_head_fieldId && (ARPLog_head_permission_Cons(ARPLog_Cons(arp_quant_head_ref, arp_quant_head_fieldId, arp_quant_head_permission, arp_quant_head_level, arp_quant_tail)) == arp_quant_head_permission && (ARPLog_head_level_Cons(ARPLog_Cons(arp_quant_head_ref, arp_quant_head_fieldId, arp_quant_head_permission, arp_quant_head_level, arp_quant_tail)) == arp_quant_head_level && ARPLog_tail_Cons(ARPLog_Cons(arp_quant_head_ref, arp_quant_head_fieldId, arp_quant_head_permission, arp_quant_head_level, arp_quant_tail)) == arp_quant_tail))))
  }

  axiom ARPLog_construct_over_destruct_Cons {
    (forall arp_quant_log: ARPLog :: { ARPLog_head_ref_Cons(arp_quant_log) } { ARPLog_head_fieldId_Cons(arp_quant_log) } { ARPLog_head_permission_Cons(arp_quant_log) } { ARPLog_head_level_Cons(arp_quant_log) } { ARPLog_tail_Cons(arp_quant_log) } ARPLog_is_Cons(arp_quant_log) ==> arp_quant_log == ARPLog_Cons(ARPLog_head_ref_Cons(arp_quant_log), ARPLog_head_fieldId_Cons(arp_quant_log), ARPLog_head_permission_Cons(arp_quant_log), ARPLog_head_level_Cons(arp_quant_log), ARPLog_tail_Cons(arp_quant_log)))
  }

  axiom ARPLog_type_of_Nil {
    ARPLog_type(ARPLog_Nil()) == ARPLog_type_Nil()
  }

  axiom ARPLog_type_of_Cons {
    (forall arp_quant_head_ref: Ref, arp_quant_head_fieldId: Int, arp_quant_head_permission: Perm, arp_quant_head_level: Int, arp_quant_tail: ARPLog :: ARPLog_type(ARPLog_Cons(arp_quant_head_ref, arp_quant_head_fieldId, arp_quant_head_permission, arp_quant_head_level, arp_quant_tail)) == ARPLog_type_Cons())
  }

  axiom ARPLog_type_existence {
    (forall arp_quant_log: ARPLog :: { ARPLog_is_Nil(arp_quant_log) } { ARPLog_is_Cons(arp_quant_log) } { ARPLog_type(arp_quant_log) } ARPLog_type(arp_quant_log) == ARPLog_type_Nil() || ARPLog_type(arp_quant_log) == ARPLog_type_Cons())
  }

  axiom ARPLog_type_is_Nil {
    (forall arp_quant_log: ARPLog :: { ARPLog_is_Nil(arp_quant_log) } { ARPLog_type(arp_quant_log) } (ARPLog_type(arp_quant_log) == ARPLog_type_Nil()) == ARPLog_is_Nil(arp_quant_log))
  }

  axiom ARPLog_type_is_Cons {
    (forall arp_quant_log: ARPLog :: { ARPLog_is_Cons(arp_quant_log) } { ARPLog_type(arp_quant_log) } (ARPLog_type(arp_quant_log) == ARPLog_type_Cons()) == ARPLog_is_Cons(arp_quant_log))
  }

  axiom ARPLog_log_max_level {
    (forall arp_quant_log: ARPLog :: { ARPLog_max_level(arp_quant_log) } ARPLog_max_level(arp_quant_log) == 6)
  }

  axiom ARPLog_sum_gt_of_log {
    (forall arp_quant_ref: Ref, arp_quant_fieldId: Int, arp_quant_level: Int, arp_quant_log: ARPLog :: { ARPLog_sum_gt(arp_quant_ref, arp_quant_fieldId, arp_quant_level, arp_quant_log) } (arp_quant_level >= ARPLog_max_level(arp_quant_log) ==> ARPLog_sum_gt(arp_quant_ref, arp_quant_fieldId, arp_quant_level, arp_quant_log) == none) && (arp_quant_level < ARPLog_max_level(arp_quant_log) ==> ARPLog_sum_gt(arp_quant_ref, arp_quant_fieldId, arp_quant_level, arp_quant_log) == ARPLog_sum_gt(arp_quant_ref, arp_quant_fieldId, arp_quant_level + 1, arp_quant_log) + ARPLog_sum(arp_quant_ref, arp_quant_fieldId, arp_quant_level + 1, arp_quant_log)))
  }

  axiom ARPLog_sum_of_log {
    (forall arp_quant_ref: Ref, arp_quant_fieldId: Int, arp_quant_level: Int, arp_quant_log: ARPLog :: { ARPLog_sum(arp_quant_ref, arp_quant_fieldId, arp_quant_level, arp_quant_log) } (ARPLog_is_Nil(arp_quant_log) ==> ARPLog_sum(arp_quant_ref, arp_quant_fieldId, arp_quant_level, arp_quant_log) == none) && (ARPLog_is_Cons(arp_quant_log) ==> ARPLog_sum(arp_quant_ref, arp_quant_fieldId, arp_quant_level, arp_quant_log) == ARPLog_sum(arp_quant_ref, arp_quant_fieldId, arp_quant_level, ARPLog_tail_Cons(arp_quant_log)) + (ARPLog_head_ref_Cons(arp_quant_log) == arp_quant_ref && (ARPLog_head_fieldId_Cons(arp_quant_log) == arp_quant_fieldId && ARPLog_head_level_Cons(arp_quant_log) == arp_quant_level) ? ARPLog_head_permission_Cons(arp_quant_log) : none)))
  }
}

domain ARP_field_functions {

  unique function field_f(): Int

  unique function field_g(): Int

  unique function field_h(): Int

  unique function field_r(): Int
}

field f: Int

field g: Int

field h: Int

field r: Ref

method bar_ARP_TRANSFORMED(x: Ref, y: Ref, z: Ref, bar_rd: Perm)
{
  var bar_log: ARPLog
  bar_log := ARPLog_Nil()
  inhale none < bar_rd && bar_rd < write
  inhale x != y && (x != z && y != z)
  inhale acc(x.f, 1 / 4) && (acc(x.g, 1 / 4) && (acc(x.r, 1 / 4) && acc(x.r.h, 1 / 4)))
  bar_log := ARPLog_Cons(x, field_f(), 1 / 4, 6, bar_log)
  bar_log := ARPLog_Cons(x, field_g(), 1 / 4, 6, bar_log)
  bar_log := ARPLog_Cons(x, field_r(), 1 / 4, 6, bar_log)
  bar_log := ARPLog_Cons(x.r, field_h(), 1 / 4, 6, bar_log)
  inhale acc(y.f, 1 / 4) && (acc(y.g, 1 / 4) && (acc(y.r, 1 / 4) && acc(y.r.h, 1 / 4)))
  bar_log := ARPLog_Cons(y, field_f(), 1 / 4, 6, bar_log)
  bar_log := ARPLog_Cons(y, field_g(), 1 / 4, 6, bar_log)
  bar_log := ARPLog_Cons(y, field_r(), 1 / 4, 6, bar_log)
  bar_log := ARPLog_Cons(y.r, field_h(), 1 / 4, 6, bar_log)
  inhale acc(z.f, 1 / 4) && (acc(z.g, 1 / 4) && (acc(z.r, 1 / 4) && acc(z.r.h, 1 / 4)))
  bar_log := ARPLog_Cons(z, field_f(), 1 / 4, 6, bar_log)
  bar_log := ARPLog_Cons(z, field_g(), 1 / 4, 6, bar_log)
  bar_log := ARPLog_Cons(z, field_r(), 1 / 4, 6, bar_log)
  bar_log := ARPLog_Cons(z.r, field_h(), 1 / 4, 6, bar_log)
  var foo_call_rd: Perm
  var arg_x: Ref
  var arg_y: Ref
  var arg_z: Ref
  inhale none < foo_call_rd && foo_call_rd < write
  arg_x := x
  arg_y := y
  arg_z := z
  label foo_call_label
  label ARP_exhale_label
  bar_log := ARPLog_Cons(arg_x, field_f(), -(1 / 4), 6, bar_log)
  bar_log := ARPLog_Cons(arg_y, field_g(), -(1 / 4), 6, bar_log)
  bar_log := ARPLog_Cons(arg_z, field_r(), -(1 / 4), 6, bar_log)
  bar_log := ARPLog_Cons(old[foo_call_label](arg_z.r), field_h(), -(1 / 4), 6, bar_log)
  exhale acc(arg_x.f, 1 / 4) && (acc(arg_y.g, 1 / 4) && (acc(arg_z.r, 1 / 4) && acc(old[foo_call_label](arg_z.r).h, 1 / 4)))
  inhale acc(arg_x.f, 1 / 4) && (acc(arg_y.g, 1 / 4) && (acc(arg_z.r, 1 / 4) && acc(arg_z.r.h, 1 / 4)))
  bar_log := ARPLog_Cons(arg_x, field_f(), 1 / 4, 6, bar_log)
  bar_log := ARPLog_Cons(arg_y, field_g(), 1 / 4, 6, bar_log)
  bar_log := ARPLog_Cons(arg_z, field_r(), 1 / 4, 6, bar_log)
  bar_log := ARPLog_Cons(arg_z.r, field_h(), 1 / 4, 6, bar_log)
  var foo_0_call_rd: Perm
  var arg_0_x: Ref
  var arg_0_y: Ref
  var arg_0_z: Ref
  inhale none < foo_0_call_rd && foo_0_call_rd < write
  arg_0_x := x
  arg_0_y := z
  arg_0_z := y
  label foo_0_call_label
  label ARP_0_exhale_label
  bar_log := ARPLog_Cons(arg_0_x, field_f(), -(1 / 4), 6, bar_log)
  bar_log := ARPLog_Cons(arg_0_y, field_g(), -(1 / 4), 6, bar_log)
  bar_log := ARPLog_Cons(arg_0_z, field_r(), -(1 / 4), 6, bar_log)
  bar_log := ARPLog_Cons(old[foo_0_call_label](arg_0_z.r), field_h(), -(1 / 4), 6, bar_log)
  exhale acc(arg_0_x.f, 1 / 4) && (acc(arg_0_y.g, 1 / 4) && (acc(arg_0_z.r, 1 / 4) && acc(old[foo_0_call_label](arg_0_z.r).h, 1 / 4)))
  inhale acc(arg_0_x.f, 1 / 4) && (acc(arg_0_y.g, 1 / 4) && (acc(arg_0_z.r, 1 / 4) && acc(arg_0_z.r.h, 1 / 4)))
  bar_log := ARPLog_Cons(arg_0_x, field_f(), 1 / 4, 6, bar_log)
  bar_log := ARPLog_Cons(arg_0_y, field_g(), 1 / 4, 6, bar_log)
  bar_log := ARPLog_Cons(arg_0_z, field_r(), 1 / 4, 6, bar_log)
  bar_log := ARPLog_Cons(arg_0_z.r, field_h(), 1 / 4, 6, bar_log)
  var foo_1_call_rd: Perm
  var arg_1_x: Ref
  var arg_1_y: Ref
  var arg_1_z: Ref
  inhale none < foo_1_call_rd && foo_1_call_rd < write
  arg_1_x := y
  arg_1_y := x
  arg_1_z := z
  label foo_1_call_label
  label ARP_1_exhale_label
  bar_log := ARPLog_Cons(arg_1_x, field_f(), -(1 / 4), 6, bar_log)
  bar_log := ARPLog_Cons(arg_1_y, field_g(), -(1 / 4), 6, bar_log)
  bar_log := ARPLog_Cons(arg_1_z, field_r(), -(1 / 4), 6, bar_log)
  bar_log := ARPLog_Cons(old[foo_1_call_label](arg_1_z.r), field_h(), -(1 / 4), 6, bar_log)
  exhale acc(arg_1_x.f, 1 / 4) && (acc(arg_1_y.g, 1 / 4) && (acc(arg_1_z.r, 1 / 4) && acc(old[foo_1_call_label](arg_1_z.r).h, 1 / 4)))
  inhale acc(arg_1_x.f, 1 / 4) && (acc(arg_1_y.g, 1 / 4) && (acc(arg_1_z.r, 1 / 4) && acc(arg_1_z.r.h, 1 / 4)))
  bar_log := ARPLog_Cons(arg_1_x, field_f(), 1 / 4, 6, bar_log)
  bar_log := ARPLog_Cons(arg_1_y, field_g(), 1 / 4, 6, bar_log)
  bar_log := ARPLog_Cons(arg_1_z, field_r(), 1 / 4, 6, bar_log)
  bar_log := ARPLog_Cons(arg_1_z.r, field_h(), 1 / 4, 6, bar_log)
  var foo_2_call_rd: Perm
  var arg_2_x: Ref
  var arg_2_y: Ref
  var arg_2_z: Ref
  inhale none < foo_2_call_rd && foo_2_call_rd < write
  arg_2_x := y
  arg_2_y := z
  arg_2_z := x
  label foo_2_call_label
  label ARP_2_exhale_label
  bar_log := ARPLog_Cons(arg_2_x, field_f(), -(1 / 4), 6, bar_log)
  bar_log := ARPLog_Cons(arg_2_y, field_g(), -(1 / 4), 6, bar_log)
  bar_log := ARPLog_Cons(arg_2_z, field_r(), -(1 / 4), 6, bar_log)
  bar_log := ARPLog_Cons(old[foo_2_call_label](arg_2_z.r), field_h(), -(1 / 4), 6, bar_log)
  exhale acc(arg_2_x.f, 1 / 4) && (acc(arg_2_y.g, 1 / 4) && (acc(arg_2_z.r, 1 / 4) && acc(old[foo_2_call_label](arg_2_z.r).h, 1 / 4)))
  inhale acc(arg_2_x.f, 1 / 4) && (acc(arg_2_y.g, 1 / 4) && (acc(arg_2_z.r, 1 / 4) && acc(arg_2_z.r.h, 1 / 4)))
  bar_log := ARPLog_Cons(arg_2_x, field_f(), 1 / 4, 6, bar_log)
  bar_log := ARPLog_Cons(arg_2_y, field_g(), 1 / 4, 6, bar_log)
  bar_log := ARPLog_Cons(arg_2_z, field_r(), 1 / 4, 6, bar_log)
  bar_log := ARPLog_Cons(arg_2_z.r, field_h(), 1 / 4, 6, bar_log)
  var foo_3_call_rd: Perm
  var arg_3_x: Ref
  var arg_3_y: Ref
  var arg_3_z: Ref
  inhale none < foo_3_call_rd && foo_3_call_rd < write
  arg_3_x := z
  arg_3_y := x
  arg_3_z := y
  label foo_3_call_label
  label ARP_3_exhale_label
  bar_log := ARPLog_Cons(arg_3_x, field_f(), -(1 / 4), 6, bar_log)
  bar_log := ARPLog_Cons(arg_3_y, field_g(), -(1 / 4), 6, bar_log)
  bar_log := ARPLog_Cons(arg_3_z, field_r(), -(1 / 4), 6, bar_log)
  bar_log := ARPLog_Cons(old[foo_3_call_label](arg_3_z.r), field_h(), -(1 / 4), 6, bar_log)
  exhale acc(arg_3_x.f, 1 / 4) && (acc(arg_3_y.g, 1 / 4) && (acc(arg_3_z.r, 1 / 4) && acc(old[foo_3_call_label](arg_3_z.r).h, 1 / 4)))
  inhale acc(arg_3_x.f, 1 / 4) && (acc(arg_3_y.g, 1 / 4) && (acc(arg_3_z.r, 1 / 4) && acc(arg_3_z.r.h, 1 / 4)))
  bar_log := ARPLog_Cons(arg_3_x, field_f(), 1 / 4, 6, bar_log)
  bar_log := ARPLog_Cons(arg_3_y, field_g(), 1 / 4, 6, bar_log)
  bar_log := ARPLog_Cons(arg_3_z, field_r(), 1 / 4, 6, bar_log)
  bar_log := ARPLog_Cons(arg_3_z.r, field_h(), 1 / 4, 6, bar_log)
  var foo_4_call_rd: Perm
  var arg_4_x: Ref
  var arg_4_y: Ref
  var arg_4_z: Ref
  inhale none < foo_4_call_rd && foo_4_call_rd < write
  arg_4_x := z
  arg_4_y := y
  arg_4_z := x
  label foo_4_call_label
  label ARP_4_exhale_label
  bar_log := ARPLog_Cons(arg_4_x, field_f(), -(1 / 4), 6, bar_log)
  bar_log := ARPLog_Cons(arg_4_y, field_g(), -(1 / 4), 6, bar_log)
  bar_log := ARPLog_Cons(arg_4_z, field_r(), -(1 / 4), 6, bar_log)
  bar_log := ARPLog_Cons(old[foo_4_call_label](arg_4_z.r), field_h(), -(1 / 4), 6, bar_log)
  exhale acc(arg_4_x.f, 1 / 4) && (acc(arg_4_y.g, 1 / 4) && (acc(arg_4_z.r, 1 / 4) && acc(old[foo_4_call_label](arg_4_z.r).h, 1 / 4)))
  inhale acc(arg_4_x.f, 1 / 4) && (acc(arg_4_y.g, 1 / 4) && (acc(arg_4_z.r, 1 / 4) && acc(arg_4_z.r.h, 1 / 4)))
  bar_log := ARPLog_Cons(arg_4_x, field_f(), 1 / 4, 6, bar_log)
  bar_log := ARPLog_Cons(arg_4_y, field_g(), 1 / 4, 6, bar_log)
  bar_log := ARPLog_Cons(arg_4_z, field_r(), 1 / 4, 6, bar_log)
  bar_log := ARPLog_Cons(arg_4_z.r, field_h(), 1 / 4, 6, bar_log)
  label bar_end_label
  label ARP_5_exhale_label
  bar_log := ARPLog_Cons(x, field_f(), -(1 / 4), 6, bar_log)
  bar_log := ARPLog_Cons(x, field_g(), -(1 / 4), 6, bar_log)
  bar_log := ARPLog_Cons(x, field_r(), -(1 / 4), 6, bar_log)
  bar_log := ARPLog_Cons(old[bar_end_label](x.r), field_h(), -(1 / 4), 6, bar_log)
  exhale acc(x.f, 1 / 4) && (acc(x.g, 1 / 4) && (acc(x.r, 1 / 4) && acc(old[bar_end_label](x.r).h, 1 / 4)))
  label ARP_6_exhale_label
  bar_log := ARPLog_Cons(y, field_f(), -(1 / 4), 6, bar_log)
  bar_log := ARPLog_Cons(y, field_g(), -(1 / 4), 6, bar_log)
  bar_log := ARPLog_Cons(y, field_r(), -(1 / 4), 6, bar_log)
  bar_log := ARPLog_Cons(old[bar_end_label](y.r), field_h(), -(1 / 4), 6, bar_log)
  exhale acc(y.f, 1 / 4) && (acc(y.g, 1 / 4) && (acc(y.r, 1 / 4) && acc(old[bar_end_label](y.r).h, 1 / 4)))
  label ARP_7_exhale_label
  bar_log := ARPLog_Cons(z, field_f(), -(1 / 4), 6, bar_log)
  bar_log := ARPLog_Cons(z, field_g(), -(1 / 4), 6, bar_log)
  bar_log := ARPLog_Cons(z, field_r(), -(1 / 4), 6, bar_log)
  bar_log := ARPLog_Cons(old[bar_end_label](z.r), field_h(), -(1 / 4), 6, bar_log)
  exhale acc(z.f, 1 / 4) && (acc(z.g, 1 / 4) && (acc(z.r, 1 / 4) && acc(old[bar_end_label](z.r).h, 1 / 4)))
}
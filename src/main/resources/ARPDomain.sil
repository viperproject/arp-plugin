domain ARPLog {

    // http://viper.ethz.ch/examples/encoding-adts.html

    // Constructors

    function ARPLog_Nil(): ARPLog
    function ARPLog_Cons(arp_quant_ref: Ref, arp_quant_fieldId: Int, permission: Perm, arp_quant_level: Int, arp_quant_log: ARPLog): ARPLog

    // Deconstructors

    function ARPLog_head_ref_Cons(arp_quant_log: ARPLog): Ref
    function ARPLog_head_fieldId_Cons(arp_quant_log: ARPLog): Int
    function ARPLog_head_permission_Cons(arp_quant_log: ARPLog): Perm
    function ARPLog_head_level_Cons(arp_quant_log: ARPLog): Int
    function ARPLog_tail_Cons(arp_quant_log: ARPLog): ARPLog

    // Constructor Types

    function ARPLog_type(arp_quant_log: ARPLog): Int
    unique function ARPLog_type_Nil(): Int
    unique function ARPLog_type_Cons(): Int

    function ARPLog_is_Nil(arp_quant_log: ARPLog): Bool
    function ARPLog_is_Cons(arp_quant_log: ARPLog): Bool

    // Functions

    function ARPLog_max_level(arp_quant_log: ARPLog): Int

    function ARPLog_sum_gt(arp_quant_ref: Ref, arp_quant_fieldId: Int, arp_quant_level: Int, arp_quant_log: ARPLog): Perm

    function ARPLog_sum(arp_quant_ref: Ref, arp_quant_fieldId: Int, arp_quant_level: Int, arp_quant_log: ARPLog): Perm

    // Axioms

    axiom ARPLog_destruct_over_construct_Cons {
        forall arp_quant_head_ref: Ref, arp_quant_head_fieldId: Int, arp_quant_head_permission: Perm, arp_quant_head_level: Int, arp_quant_tail: ARPLog :: { ARPLog_Cons(arp_quant_head_ref, arp_quant_head_fieldId, arp_quant_head_permission, arp_quant_head_level, arp_quant_tail) }
            ARPLog_head_ref_Cons(ARPLog_Cons(arp_quant_head_ref, arp_quant_head_fieldId, arp_quant_head_permission, arp_quant_head_level, arp_quant_tail)) == arp_quant_head_ref
         && ARPLog_head_fieldId_Cons(ARPLog_Cons(arp_quant_head_ref, arp_quant_head_fieldId, arp_quant_head_permission, arp_quant_head_level, arp_quant_tail)) == arp_quant_head_fieldId
         && ARPLog_head_permission_Cons(ARPLog_Cons(arp_quant_head_ref, arp_quant_head_fieldId, arp_quant_head_permission, arp_quant_head_level, arp_quant_tail)) == arp_quant_head_permission
         && ARPLog_head_level_Cons(ARPLog_Cons(arp_quant_head_ref, arp_quant_head_fieldId, arp_quant_head_permission, arp_quant_head_level, arp_quant_tail)) == arp_quant_head_level
         && ARPLog_tail_Cons(ARPLog_Cons(arp_quant_head_ref, arp_quant_head_fieldId, arp_quant_head_permission, arp_quant_head_level, arp_quant_tail)) == arp_quant_tail
    }

    axiom ARPLog_construct_over_destruct_Cons {
        forall arp_quant_log: ARPLog :: { ARPLog_head_ref_Cons(arp_quant_log) } { ARPLog_head_fieldId_Cons(arp_quant_log) } { ARPLog_head_permission_Cons(arp_quant_log) } { ARPLog_head_level_Cons(arp_quant_log) } { ARPLog_tail_Cons(arp_quant_log) }
            ARPLog_is_Cons(arp_quant_log) ==> arp_quant_log == ARPLog_Cons(ARPLog_head_ref_Cons(arp_quant_log), ARPLog_head_fieldId_Cons(arp_quant_log), ARPLog_head_permission_Cons(arp_quant_log), ARPLog_head_level_Cons(arp_quant_log), ARPLog_tail_Cons(arp_quant_log))
    }

    axiom ARPLog_type_of_Nil {
        ARPLog_type(ARPLog_Nil()) == ARPLog_type_Nil()
    }

    axiom ARPLog_type_of_Cons {
        forall arp_quant_head_ref: Ref, arp_quant_head_fieldId: Int, arp_quant_head_permission: Perm, arp_quant_head_level: Int, arp_quant_tail: ARPLog ::
            ARPLog_type(ARPLog_Cons(arp_quant_head_ref, arp_quant_head_fieldId, arp_quant_head_permission, arp_quant_head_level, arp_quant_tail)) == ARPLog_type_Cons()
    }

    axiom ARPLog_type_existence {
        forall arp_quant_log: ARPLog :: { ARPLog_is_Nil(arp_quant_log) }{ ARPLog_is_Cons(arp_quant_log) }{ ARPLog_type(arp_quant_log) }
            ARPLog_type(arp_quant_log) == ARPLog_type_Nil()
         || ARPLog_type(arp_quant_log) == ARPLog_type_Cons()
    }

    axiom ARPLog_type_is_Nil {
        forall arp_quant_log: ARPLog :: { ARPLog_is_Nil(arp_quant_log) }{ ARPLog_type(arp_quant_log) }
            ARPLog_type(arp_quant_log) == ARPLog_type_Nil() <==> ARPLog_is_Nil(arp_quant_log)
    }

    axiom ARPLog_type_is_Cons {
        forall arp_quant_log: ARPLog :: { ARPLog_is_Cons(arp_quant_log) }{ ARPLog_type(arp_quant_log) }
            ARPLog_type(arp_quant_log) == ARPLog_type_Cons() <==> ARPLog_is_Cons(arp_quant_log)
    }

    // could be made more generic, but this is probably faster
    axiom ARPLog_log_max_level {
        forall arp_quant_log: ARPLog :: { ARPLog_max_level(arp_quant_log) }
            ARPLog_max_level(arp_quant_log) == 6
    }

    axiom ARPLog_sum_gt_of_log {
        forall arp_quant_ref: Ref, arp_quant_fieldId: Int, arp_quant_level: Int, arp_quant_log: ARPLog :: { ARPLog_sum_gt(arp_quant_ref, arp_quant_fieldId, arp_quant_level, arp_quant_log) }
            (arp_quant_level >= ARPLog_max_level(arp_quant_log) ==> ARPLog_sum_gt(arp_quant_ref, arp_quant_fieldId, arp_quant_level, arp_quant_log) == none)
         && (arp_quant_level < ARPLog_max_level(arp_quant_log) ==>
                ARPLog_sum_gt(arp_quant_ref, arp_quant_fieldId, arp_quant_level, arp_quant_log) ==
                (
                    ARPLog_sum_gt(arp_quant_ref, arp_quant_fieldId, arp_quant_level + 1, arp_quant_log) + ARPLog_sum(arp_quant_ref, arp_quant_fieldId, arp_quant_level + 1, arp_quant_log)
                )
            )
    }

    axiom ARPLog_sum_of_log {
        forall arp_quant_ref: Ref, arp_quant_fieldId: Int, arp_quant_level: Int, arp_quant_log: ARPLog :: { ARPLog_sum(arp_quant_ref, arp_quant_fieldId, arp_quant_level, arp_quant_log) }
            (ARPLog_is_Nil(arp_quant_log) ==> ARPLog_sum(arp_quant_ref, arp_quant_fieldId, arp_quant_level, arp_quant_log) == none)
         && (ARPLog_is_Cons(arp_quant_log) ==>
                ARPLog_sum(arp_quant_ref, arp_quant_fieldId, arp_quant_level, arp_quant_log) ==
                (
                    ARPLog_sum(arp_quant_ref, arp_quant_fieldId, arp_quant_level, ARPLog_tail_Cons(arp_quant_log)) +
                    (
                        (
                            ARPLog_head_ref_Cons(arp_quant_log) == arp_quant_ref
                         && ARPLog_head_fieldId_Cons(arp_quant_log) == arp_quant_fieldId
                         && ARPLog_head_level_Cons(arp_quant_log) == arp_quant_level
                        ) ?
                        (ARPLog_head_permission_Cons(arp_quant_log)) :
                        (none)
                    )
                )
            )
    }
}

// requires false to make sure all references to rd are transformed
function rd(): Perm
  requires false

// requires false to make sure all references to rdc are transformed
function rdc(): Perm
  requires false

// requires false to make sure all references to rdw are transformed
function rdw(): Perm
  requires false

function globalRd(): Perm
  ensures none < result && result < write

function epsilonRd(): Perm
  ensures none < result && result < write


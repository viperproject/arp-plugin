// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.
//
// Copyright (c) 2011-2019 ETH Zurich.

domain ARPLog {

    // http://viper.ethz.ch/examples/encoding-adts.html

    // Constructors

    function ARPLog_Nil(): ARPLog
    function ARPLog_Cons(ref: Ref, fieldId: Int, permission: Perm, level: Int, log: ARPLog): ARPLog

    // Deconstructors

    function ARPLog_head_ref_Cons(log: ARPLog): Ref
    function ARPLog_head_fieldId_Cons(log: ARPLog): Int
    function ARPLog_head_permission_Cons(log: ARPLog): Perm
    function ARPLog_head_level_Cons(log: ARPLog): Int
    function ARPLog_tail_Cons(log: ARPLog): ARPLog

    // Constructor Types

    function ARPLog_type(log: ARPLog): Int
    unique function ARPLog_type_Nil(): Int
    unique function ARPLog_type_Cons(): Int

    function ARPLog_is_Nil(log: ARPLog): Bool
    function ARPLog_is_Cons(log: ARPLog): Bool

    // Functions

    function ARPLog_max_level(log: ARPLog): Int

    function ARPLog_sum_gt(ref: Ref, fieldId: Int, level: Int, log: ARPLog): Perm

    function ARPLog_sum(ref: Ref, fieldId: Int, level: Int, log: ARPLog): Perm

    // Axioms

    axiom destruct_over_construct_Cons {
        forall head_ref: Ref, head_fieldId: Int, head_permission: Perm, head_level: Int, tail: ARPLog :: { ARPLog_Cons(head_ref, head_fieldId, head_permission, head_level, tail) }
            ARPLog_head_ref_Cons(ARPLog_Cons(head_ref, head_fieldId, head_permission, head_level, tail)) == head_ref
         && ARPLog_head_fieldId_Cons(ARPLog_Cons(head_ref, head_fieldId, head_permission, head_level, tail)) == head_fieldId
         && ARPLog_head_permission_Cons(ARPLog_Cons(head_ref, head_fieldId, head_permission, head_level, tail)) == head_permission
         && ARPLog_head_level_Cons(ARPLog_Cons(head_ref, head_fieldId, head_permission, head_level, tail)) == head_level
         && ARPLog_tail_Cons(ARPLog_Cons(head_ref, head_fieldId, head_permission, head_level, tail)) == tail
    }

    axiom construct_over_destruct_Cons {
        forall log: ARPLog :: { ARPLog_head_ref_Cons(log) } { ARPLog_head_fieldId_Cons(log) } { ARPLog_head_permission_Cons(log) } { ARPLog_head_level_Cons(log) } { ARPLog_tail_Cons(log) }
            ARPLog_is_Cons(log) ==> log == ARPLog_Cons(ARPLog_head_ref_Cons(log), ARPLog_head_fieldId_Cons(log), ARPLog_head_permission_Cons(log), ARPLog_head_level_Cons(log), ARPLog_tail_Cons(log))
    }

    axiom type_of_Nil {
        ARPLog_type(ARPLog_Nil()) == ARPLog_type_Nil()
    }

    axiom type_of_Cons {
        forall head_ref: Ref, head_fieldId: Int, head_permission: Perm, head_level: Int, tail: ARPLog ::
            ARPLog_type(ARPLog_Cons(head_ref, head_fieldId, head_permission, head_level, tail)) == ARPLog_type_Cons()
    }

    axiom type_existence {
        forall log: ARPLog :: { ARPLog_is_Nil(log) }{ ARPLog_is_Cons(log) }{ ARPLog_type(log) }
            ARPLog_type(log) == ARPLog_type_Nil()
         || ARPLog_type(log) == ARPLog_type_Cons()
    }

    axiom type_is_Nil {
        forall log: ARPLog :: { ARPLog_is_Nil(log) }{ ARPLog_type(log) }
            ARPLog_type(log) == ARPLog_type_Nil() <==> ARPLog_is_Nil(log)
    }

    axiom type_is_Cons {
        forall log: ARPLog :: { ARPLog_is_Cons(log) }{ ARPLog_type(log) }
            ARPLog_type(log) == ARPLog_type_Cons() <==> ARPLog_is_Cons(log)
    }

    // could be made more generic, but this is probably faster
    axiom log_max_level {
        forall log: ARPLog :: { ARPLog_max_level(log) }
            ARPLog_max_level(log) == 6
    }

    axiom sum_gt_of_log {
        forall ref: Ref, fieldId: Int, level: Int, log: ARPLog :: { ARPLog_sum_gt(ref, fieldId, level, log) }
            (level >= ARPLog_max_level(log) ==> ARPLog_sum_gt(ref, fieldId, level, log) == none)
         && (level < ARPLog_max_level(log) ==>
                ARPLog_sum_gt(ref, fieldId, level, log) ==
                (
                    ARPLog_sum_gt(ref, fieldId, level + 1, log) + ARPLog_sum(ref, fieldId, level + 1, log)
                )
            )
    }

    axiom sum_of_log {
        forall ref: Ref, fieldId: Int, level: Int, log: ARPLog :: { ARPLog_sum(ref, fieldId, level, log) }
            (ARPLog_is_Nil(log) ==> ARPLog_sum(ref, fieldId, level, log) == none)
         && (ARPLog_is_Cons(log) ==>
                ARPLog_sum(ref, fieldId, level, log) ==
                (
                    ARPLog_sum(ref, fieldId, level, ARPLog_tail_Cons(log)) +
                    (
                        (
                            ARPLog_head_ref_Cons(log) == ref
                         && ARPLog_head_fieldId_Cons(log) == fieldId
                         && ARPLog_head_level_Cons(log) == level
                        ) ?
                        (ARPLog_head_permission_Cons(log)) :
                        (none)
                    )
                )
            )
    }
}

domain ARP_field_functions {

  unique function field_f(): Int

}

field f: Int

method test (x: Ref)
{
    var pl0: ARPLog
    pl0 := ARPLog_Nil()

    assert ARPLog_type(pl0) == ARPLog_type_Nil()
    assert ARPLog_is_Nil(pl0)
    assert !ARPLog_is_Cons(pl0)

    var pl1: ARPLog
    pl1 := ARPLog_Cons(x, field_f(), write, 6, pl0)
    assert ARPLog_type(pl1) == ARPLog_type_Cons()
    assert ARPLog_is_Cons(pl1)
    assert !ARPLog_is_Nil(pl1)

    assert ARPLog_head_ref_Cons(pl1) == x
    assert ARPLog_head_fieldId_Cons(pl1) == field_f()
    assert ARPLog_head_permission_Cons(pl1) == write
    assert ARPLog_head_level_Cons(pl1) == 6
    assert ARPLog_tail_Cons(pl1) == pl0

    assert ARPLog_sum_gt(x, field_f(), 5, pl1) == write
    assert ARPLog_sum(x, field_f(), 5, pl1) == none
    assert ARPLog_sum(x, field_f(), 6, pl1) == write

    var pl2: ARPLog
    pl2 := ARPLog_Cons(x, field_f(), -1/3, 2, pl1)
    assert ARPLog_type(pl2) == ARPLog_type_Cons()
    assert ARPLog_is_Cons(pl2)
    assert !ARPLog_is_Nil(pl2)

    assert ARPLog_head_ref_Cons(pl2) == x
    assert ARPLog_head_fieldId_Cons(pl2) == field_f()
    assert ARPLog_head_permission_Cons(pl2) == -1/3
    assert ARPLog_head_level_Cons(pl2) == 2
    assert ARPLog_tail_Cons(pl2) == pl1

    assert ARPLog_sum_gt(x, field_f(), 5, pl2) == write
    assert ARPLog_sum_gt(x, field_f(), 0, pl2) == 2/3
    assert ARPLog_sum(x, field_f(), 2, pl2) == -1/3
    assert ARPLog_sum(x, field_f(), 5, pl2) == none
    assert ARPLog_sum(x, field_f(), 6, pl2) == write

}

method test2(x: Ref)
{
    var pl0: ARPLog

    inhale (forall quantRef: Ref, quantLevel: Int, quantField: Int :: { ARPLog_sum(quantRef, quantField, quantLevel, pl0) } ARPLog_sum(quantRef, quantField, quantLevel, pl0) == ((exists r: Ref :: r != null && (quantRef == r && quantField == field_f())) ? (quantLevel == 4 ? 1 / 2 : none) : none))

    assert forall ii: Int :: (exists i: Int :: i == ii)
    assert forall rr: Ref :: (exists r: Ref :: r == rr)
    assert ARPLog_sum(x, field_f(), 5, pl0) == none
    assert ARPLog_sum(x, field_f(), 4, pl0) == 1/2
    assert ARPLog_sum(x, field_f(), 3, pl0) == none
    assert ARPLog_is_Cons(pl0)
    assert false
}

domain PyType {
  
  function extends_(sub: PyType, super: PyType): Bool
  
  function issubtype(sub: PyType, super: PyType): Bool
  
  function isnotsubtype(sub: PyType, super: PyType): Bool
  
  function tuple_args(t: PyType): Seq[PyType]
  
  function typeof(obj: Ref): PyType
  
  function get_basic(t: PyType): PyType
  
  function union_type_1(arg_1: PyType): PyType
  
  function union_type_2(arg_1: PyType, arg_2: PyType): PyType
  
  function union_type_3(arg_1: PyType, arg_2: PyType, arg_3: PyType): PyType
  
  function union_type_4(arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType): PyType
  
  unique function Place(): PyType
  
  unique function object(): PyType
  
  unique function Thread(): PyType

  unique function Exception(): PyType

  unique function tuple_basic(): PyType

  function tuple(args: Seq[PyType]): PyType

  function tuple_arg(typ: PyType, index: Int): PyType

  unique function dict_basic(): PyType

  function dict(arg0: PyType, arg1: PyType): PyType

  function dict_arg(typ: PyType, index: Int): PyType

  unique function bytes(): PyType

  unique function NoneType(): PyType

  unique function int(): PyType

  unique function bool(): PyType

  unique function traceback(): PyType

  unique function range(): PyType

  unique function Sequence_basic(): PyType

  function Sequence(arg0: PyType): PyType

  function Sequence_arg(typ: PyType, index: Int): PyType

  unique function type(): PyType

  unique function slice(): PyType

  unique function set_basic(): PyType

  function set(arg0: PyType): PyType

  function set_arg(typ: PyType, index: Int): PyType

  unique function list_basic(): PyType

  function list(arg0: PyType): PyType

  function list_arg(typ: PyType, index: Int): PyType

  unique function Iterator_basic(): PyType

  function Iterator(arg0: PyType): PyType

  function Iterator_arg(typ: PyType, index: Int): PyType

  unique function str(): PyType

  unique function LevelType(): PyType

  unique function __prim__Sequence_type(): PyType

  unique function Clazz(): PyType

  axiom issubtype_transitivity {
    (forall sub: PyType, middle: PyType, super: PyType :: { issubtype(sub, middle),issubtype(middle, super) } issubtype(sub, middle) && issubtype(middle, super) ==> issubtype(sub, super))
  }

  axiom issubtype_reflexivity {
    (forall type_: PyType :: { issubtype(type_, type_) } issubtype(type_, type_))
  }

  axiom extends_implies_subtype {
    (forall sub: PyType, sub2: PyType :: { extends_(sub, sub2) } extends_(sub, sub2) ==> issubtype(sub, sub2))
  }

  axiom null_nonetype {
    (forall r: Ref :: { typeof(r) } issubtype(typeof(r), NoneType()) == (r == null))
  }

  axiom issubtype_object {
    (forall type_: PyType :: { issubtype(type_, object()) } issubtype(type_, object()))
  }

  axiom issubtype_exclusion {
    (forall sub: PyType, sub2: PyType, super: PyType :: { extends_(sub, super),extends_(sub2, super) } extends_(sub, super) && extends_(sub2, super) && sub != sub2 ==> isnotsubtype(sub, sub2) && isnotsubtype(sub2, sub))
  }

  axiom issubtype_exclusion_2 {
    (forall sub: PyType, super: PyType :: { issubtype(sub, super) } { issubtype(super, sub) } issubtype(sub, super) && sub != super ==> !issubtype(super, sub))
  }

  axiom issubtype_exclusion_propagation {
    (forall sub: PyType, middle: PyType, super: PyType :: { issubtype(sub, middle),isnotsubtype(middle, super) } issubtype(sub, middle) && isnotsubtype(middle, super) ==> !issubtype(sub, super))
  }

  axiom tuple_arg_def {
    (forall seq: Seq[PyType], i: Int, Z: PyType :: { tuple(seq),tuple_arg(Z, i) } issubtype(Z, tuple(seq)) ==> issubtype(tuple_arg(Z, i), seq[i]))
  }

  axiom tuple_args_def {
    (forall seq: Seq[PyType], Z: PyType :: { issubtype(Z, tuple(seq)) } issubtype(Z, tuple(seq)) ==> |tuple_args(Z)| == |seq|)
  }

  axiom tuple_self_subtype {
    (forall seq1: Seq[PyType], seq2: Seq[PyType] :: seq1 != seq2 && |seq1| == |seq2| && (forall i: Int :: i >= 0 && i < |seq1| ==> issubtype(seq1[i], seq2[i])) ==> issubtype(tuple(seq1), tuple(seq2)))
  }

  axiom union_subtype_1 {
    (forall arg_1: PyType, X: PyType :: { issubtype(X, union_type_1(arg_1)) } issubtype(X, union_type_1(arg_1)) == (false || issubtype(X, arg_1)))
  }

  axiom union_subtype_2 {
    (forall arg_1: PyType, arg_2: PyType, X: PyType :: { issubtype(X, union_type_2(arg_1, arg_2)) } issubtype(X, union_type_2(arg_1, arg_2)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2)))
  }

  axiom union_subtype_3 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, X: PyType :: { issubtype(X, union_type_3(arg_1, arg_2, arg_3)) } issubtype(X, union_type_3(arg_1, arg_2, arg_3)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2) || issubtype(X, arg_3)))
  }

  axiom union_subtype_4 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType, X: PyType :: { issubtype(X, union_type_4(arg_1, arg_2, arg_3, arg_4)) } issubtype(X, union_type_4(arg_1, arg_2, arg_3, arg_4)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2) || issubtype(X, arg_3) || issubtype(X, arg_4)))
  }

  axiom subtype_union_1 {
    (forall arg_1: PyType, X: PyType :: { issubtype(union_type_1(arg_1), X) } issubtype(union_type_1(arg_1), X) == (true && issubtype(arg_1, X)))
  }

  axiom subtype_union_2 {
    (forall arg_1: PyType, arg_2: PyType, X: PyType :: { issubtype(union_type_2(arg_1, arg_2), X) } issubtype(union_type_2(arg_1, arg_2), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X)))
  }

  axiom subtype_union_3 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, X: PyType :: { issubtype(union_type_3(arg_1, arg_2, arg_3), X) } issubtype(union_type_3(arg_1, arg_2, arg_3), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X) && issubtype(arg_3, X)))
  }

  axiom subtype_union_4 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType, X: PyType :: { issubtype(union_type_4(arg_1, arg_2, arg_3, arg_4), X) } issubtype(union_type_4(arg_1, arg_2, arg_3, arg_4), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X) && issubtype(arg_3, X) && issubtype(arg_4, X)))
  }

  axiom subtype_Place {
    extends_(Place(), object()) && get_basic(Place()) == Place()
  }

  axiom subtype_Thread {
    extends_(Thread(), object()) && get_basic(Thread()) == Thread()
  }

  axiom subtype_Exception {
    extends_(Exception(), object()) && get_basic(Exception()) == Exception()
  }

  axiom subtype_tuple {
    (forall args: Seq[PyType] :: { tuple(args) } ((forall e: PyType :: (e in args) ==> e == object()) ==> extends_(tuple(args), object())) && get_basic(tuple(args)) == tuple_basic())
  }

  axiom subtype_dict {
    (forall var0: PyType, var1: PyType :: { dict(var0, var1) } extends_(dict(var0, var1), object()) && get_basic(dict(var0, var1)) == dict_basic())
  }

  axiom dict_args0 {
    (forall Z: PyType, arg0: PyType, arg1: PyType :: issubtype(Z, dict(arg0, arg1)) ==> dict_arg(Z, 0) == arg0)
  }

  axiom dict_args1 {
    (forall Z: PyType, arg0: PyType, arg1: PyType :: issubtype(Z, dict(arg0, arg1)) ==> dict_arg(Z, 1) == arg1)
  }

  axiom subtype_bytes {
    extends_(bytes(), object()) && get_basic(bytes()) == bytes()
  }

  axiom subtype_NoneType {
    extends_(NoneType(), object()) && get_basic(NoneType()) == NoneType()
  }

  axiom subtype_int {
    extends_(int(), object()) && get_basic(int()) == int()
  }

  axiom subtype_bool {
    extends_(bool(), int()) && get_basic(bool()) == bool()
  }

  axiom subtype_traceback {
    extends_(traceback(), object()) && get_basic(traceback()) == traceback()
  }

  axiom subtype_range {
    extends_(range(), object()) && get_basic(range()) == range()
  }

  axiom subtype_Sequence {
    (forall var0: PyType :: { Sequence(var0) } extends_(Sequence(var0), object()) && get_basic(Sequence(var0)) == Sequence_basic())
  }

  axiom Sequence_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, Sequence(arg0)) ==> Sequence_arg(Z, 0) == arg0)
  }

  axiom subtype_type {
    extends_(type(), object()) && get_basic(type()) == type()
  }

  axiom subtype_slice {
    extends_(slice(), object()) && get_basic(slice()) == slice()
  }

  axiom subtype_set {
    (forall var0: PyType :: { set(var0) } extends_(set(var0), object()) && get_basic(set(var0)) == set_basic())
  }

  axiom set_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, set(arg0)) ==> set_arg(Z, 0) == arg0)
  }

  axiom subtype_list {
    (forall var0: PyType :: { list(var0) } extends_(list(var0), object()) && get_basic(list(var0)) == list_basic())
  }

  axiom list_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, list(arg0)) ==> list_arg(Z, 0) == arg0)
  }

  axiom subtype_Iterator {
    (forall var0: PyType :: { Iterator(var0) } extends_(Iterator(var0), object()) && get_basic(Iterator(var0)) == Iterator_basic())
  }

  axiom Iterator_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, Iterator(arg0)) ==> Iterator_arg(Z, 0) == arg0)
  }

  axiom subtype_str {
    extends_(str(), object()) && get_basic(str()) == str()
  }

  axiom subtype___prim__Sequence_type {
    extends_(__prim__Sequence_type(), object()) && get_basic(__prim__Sequence_type()) == __prim__Sequence_type()
  }

  axiom subtype_Clazz {
    extends_(Clazz(), object()) && get_basic(Clazz()) == Clazz()
  }
}

domain Function {


}

domain Measure$ {

  function Measure$create(guard: Bool, key: Ref, value: Int): Measure$

  function Measure$guard(m: Measure$): Bool

  function Measure$key(m: Measure$): Ref

  function Measure$value(m: Measure$): Int

  axiom Measure$A0 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$guard(Measure$create(g, k, v)) } Measure$guard(Measure$create(g, k, v)) == g)
  }

  axiom Measure$A1 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$key(Measure$create(g, k, v)) } Measure$key(Measure$create(g, k, v)) == k)
  }

  axiom Measure$A2 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$value(Measure$create(g, k, v)) } Measure$value(Measure$create(g, k, v)) == v)
  }
}

domain _Name {

  function _combine(n1: _Name, n2: _Name): _Name

  function _single(n: Int): _Name

  function _get_combined_prefix(n: _Name): _Name

  function _get_combined_name(n: _Name): _Name

  function _get_value(n: _Name): Int

  function _is_single(n: _Name): Bool

  axiom all_single_or_combined {
    (forall n: _Name :: n == _single(_get_value(n)) || n == _combine(_get_combined_prefix(n), _get_combined_name(n)))
  }

  axiom single_is_single {
    (forall i: Int :: { _single(i) } _is_single(_single(i)))
  }

  axiom combined_is_not_single {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } !_is_single(_combine(n1, n2)))
  }

  axiom decompose_single {
    (forall i: Int :: { _single(i) } _get_value(_single(i)) == i)
  }

  axiom decompose_combined_prefix {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } _get_combined_prefix(_combine(n1, n2)) == n1)
  }

  axiom decompose_combined_name {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } _get_combined_name(_combine(n1, n2)) == n2)
  }
}

field _val: Ref

field __container: Ref

field __iter_index: Int

field __previous: Ref

field list_acc: Seq[Ref]

field set_acc: Set[Ref]

field dict_acc: Set[Ref]

field Measure$acc: Seq[Ref]

field MustReleaseBounded: Int

field MustReleaseUnbounded: Int

field Clazz_x: Ref

field Clazz_y: Ref

function _isDefined(id: Int): Bool


function _checkDefined(val: Ref, id: Int): Ref
  requires _isDefined(id)
{
  val
}

function _asserting(val: Ref, ass: Bool): Ref
  requires ass
{
  val
}

function _int_to_bool(i: Int): Bool


function __file__(): Ref


function __name__(): Ref


function __prim__int___box__(prim: Int): Ref
  ensures typeof(result) == int()
  ensures int___unbox__(result) == prim
  ensures (forall other: Int :: { __prim__int___box__(other) } (__prim__int___box__(other) == result) == (other == prim))


function int___unbox__(box: Ref): Int
  requires issubtype(typeof(box), int())
  ensures !issubtype(typeof(box), bool()) ==> __prim__int___box__(result) == box
  ensures issubtype(typeof(box), bool()) ==> __prim__bool___box__(result != 0) == box


function __prim__bool___box__(prim: Bool): Ref
  ensures typeof(result) == bool()
  ensures bool___unbox__(result) == prim
  ensures int___unbox__(result) == (prim ? 1 : 0)


function bool___unbox__(box: Ref): Bool
  requires issubtype(typeof(box), bool())
  ensures __prim__bool___box__(result) == box


function object___eq__(self: Ref, other: Ref): Bool
  ensures self == other ==> result
  ensures (self == null) != (other == null) ==> !result


function Level(r: Ref): Perm


function str___len__(self: Ref): Int
  ensures result >= 0


function str___val__(self: Ref): Int


function str___create__(len: Int, value: Int): Ref
  ensures str___len__(result) == len
  ensures str___val__(result) == value
  ensures typeof(result) == str()


function str___eq__(self: Ref, other: Ref): Bool
  requires issubtype(typeof(self), str())
  ensures (str___val__(self) == str___val__(other)) == result
  ensures result ==> str___len__(self) == str___len__(other)


predicate MustTerminate(r: Ref)

predicate MustInvokeBounded(r: Ref)

predicate MustInvokeUnbounded(r: Ref)

predicate MustInvokeCredit(r: Ref)

predicate _MaySet(rec: Ref, id: Int)

method Clazz___init__(_cthread_116: Ref, _caller_measures_116: Seq[Measure$], _residue_116: Perm, self: Ref) returns (_current_wait_level_116: Perm)
  requires _cthread_116 != null
  requires issubtype(typeof(_cthread_116), Thread())
  requires self != null
  requires acc(_MaySet(self, 4443106262936097725), write)
  requires acc(_MaySet(self, 4443387737912808381), write)
  requires issubtype(typeof(self), Clazz())
  requires self != null
  requires [true, perm(MustTerminate(_cthread_116)) == none && ((forperm [MustInvokeBounded] _r_1 :: false) && ((forperm [MustInvokeUnbounded] _r_1 :: false) && ((forperm [MustReleaseBounded] _r_1 :: false) && (forperm [MustReleaseUnbounded] _r_1 :: false))))]
  ensures [(forperm [MustReleaseBounded, MustReleaseUnbounded] _r :: Level(_r) <= _current_wait_level_116) && _residue_116 <= _current_wait_level_116, true]
  ensures acc(self.Clazz_x, write) && issubtype(typeof(self.Clazz_x), int())
  ensures acc(self.Clazz_y, write) && issubtype(typeof(self.Clazz_y), int())
  ensures [true, (forperm [MustInvokeBounded] _r_0 :: false) && ((forperm [MustInvokeUnbounded] _r_0 :: false) && ((forperm [MustReleaseBounded] _r_0 :: false) && (forperm [MustReleaseUnbounded] _r_0 :: false)))]
{
  var self_2: Ref
  var _cwl_116: Perm
  var _method_measures_116: Seq[Measure$]
  _method_measures_116 := Seq[Measure$]()
  inhale typeof(self) == Clazz()
  self_2 := self
  if (perm(_MaySet(self_2, 4443106262936097725)) > none) {
    exhale acc(_MaySet(self_2, 4443106262936097725), write)
    inhale acc(self_2.Clazz_x, write)
  }
  self_2.Clazz_x := __prim__int___box__(5)
  if (perm(_MaySet(self_2, 4443387737912808381)) > none) {
    exhale acc(_MaySet(self_2, 4443387737912808381), write)
    inhale acc(self_2.Clazz_y, write)
  }
  self_2.Clazz_y := __prim__int___box__(3)
  goto __end
  label __end
}

method Clazz_m1(_cthread_117: Ref, _caller_measures_117: Seq[Measure$], _residue_117: Perm, self_0: Ref) returns (_current_wait_level_117: Perm)
  requires _cthread_117 != null
  requires issubtype(typeof(_cthread_117), Thread())
  requires issubtype(typeof(self_0), Clazz())
  requires self_0 != null
  requires !object___eq__(self_0, null)
  requires acc(self_0.Clazz_y, write) && issubtype(typeof(self_0.Clazz_y), int()) && (acc(self_0.Clazz_x, 1 / 2) && issubtype(typeof(self_0.Clazz_x), int()))
  requires [true, perm(MustTerminate(_cthread_117)) == none && ((forperm [MustInvokeBounded] _r_4 :: false) && ((forperm [MustInvokeUnbounded] _r_4 :: false) && ((forperm [MustReleaseBounded] _r_4 :: false) && (forperm [MustReleaseUnbounded] _r_4 :: false))))]
  ensures [(forperm [MustReleaseBounded, MustReleaseUnbounded] _r_2 :: Level(_r_2) <= _current_wait_level_117) && _residue_117 <= _current_wait_level_117, true]
  ensures acc(self_0.Clazz_y, write) && issubtype(typeof(self_0.Clazz_y), int()) && (acc(self_0.Clazz_x, 1 / 2) && issubtype(typeof(self_0.Clazz_x), int()) && int___unbox__(self_0.Clazz_y) == int___unbox__(self_0.Clazz_x) + 1)
  ensures [true, (forperm [MustInvokeBounded] _r_3 :: false) && ((forperm [MustInvokeUnbounded] _r_3 :: false) && ((forperm [MustReleaseBounded] _r_3 :: false) && (forperm [MustReleaseUnbounded] _r_3 :: false)))]
{
  var self_3: Ref
  var _cwl_117: Perm
  var _method_measures_117: Seq[Measure$]
  _method_measures_117 := Seq[Measure$]()
  inhale typeof(self_0) == Clazz()
  self_3 := self_0
  if (perm(_MaySet(self_3, 4443387737912808381)) > none) {
    exhale acc(_MaySet(self_3, 4443387737912808381), write)
    inhale acc(self_3.Clazz_y, write)
  }
  self_3.Clazz_y := __prim__int___box__(int___unbox__(self_3.Clazz_x) + 1)
  goto __end
  label __end
}

method Clazz_m2(_cthread_118: Ref, _caller_measures_118: Seq[Measure$], _residue_118: Perm, self_1: Ref) returns (_current_wait_level_118: Perm)
  requires _cthread_118 != null
  requires issubtype(typeof(_cthread_118), Thread())
  requires issubtype(typeof(self_1), Clazz())
  requires self_1 != null
  requires !object___eq__(self_1, null)
  requires acc(self_1.Clazz_y, write) && issubtype(typeof(self_1.Clazz_y), int()) && (acc(self_1.Clazz_x, write) && issubtype(typeof(self_1.Clazz_x), int()) && int___unbox__(self_1.Clazz_x) == 5)
  requires [true, perm(MustTerminate(_cthread_118)) == none && ((forperm [MustInvokeBounded] _r_7 :: false) && ((forperm [MustInvokeUnbounded] _r_7 :: false) && ((forperm [MustReleaseBounded] _r_7 :: false) && (forperm [MustReleaseUnbounded] _r_7 :: false))))]
  ensures [(forperm [MustReleaseBounded, MustReleaseUnbounded] _r_5 :: Level(_r_5) <= _current_wait_level_118) && _residue_118 <= _current_wait_level_118, true]
  ensures acc(self_1.Clazz_y, write) && issubtype(typeof(self_1.Clazz_y), int()) && (acc(self_1.Clazz_x, write) && issubtype(typeof(self_1.Clazz_x), int()) && (int___unbox__(self_1.Clazz_x) == 5 && int___unbox__(self_1.Clazz_y) == int___unbox__(self_1.Clazz_x) + 1))
  ensures [true, (forperm [MustInvokeBounded] _r_6 :: false) && ((forperm [MustInvokeUnbounded] _r_6 :: false) && ((forperm [MustReleaseBounded] _r_6 :: false) && (forperm [MustReleaseUnbounded] _r_6 :: false)))]
{
  var self_4: Ref
  var _cwl_118: Perm
  var _method_measures_118: Seq[Measure$]
  _method_measures_118 := Seq[Measure$]()
  inhale typeof(self_1) == Clazz()
  self_4 := self_1
  if (perm(_MaySet(self_4, 4443387737912808381)) > none) {
    exhale acc(_MaySet(self_4, 4443387737912808381), write)
    inhale acc(self_4.Clazz_y, write)
  }
  self_4.Clazz_y := __prim__int___box__(1)
  _cwl_118 := Clazz_m1(_cthread_118, _method_measures_118, _residue_118, self_4)
  assert int___unbox__(self_4.Clazz_y) == 6 && int___unbox__(self_4.Clazz_x) == 5
  goto __end
  label __end
}

method main(_cthread_119: Ref, _caller_measures_119: Seq[Measure$], _residue_119: Perm) returns (_current_wait_level_119: Perm)
  requires _cthread_119 != null
  requires issubtype(typeof(_cthread_119), Thread())
  requires [true, perm(MustTerminate(_cthread_119)) == none && ((forperm [MustInvokeBounded] _r_10 :: false) && ((forperm [MustInvokeUnbounded] _r_10 :: false) && ((forperm [MustReleaseBounded] _r_10 :: false) && (forperm [MustReleaseUnbounded] _r_10 :: false))))]
  ensures [(forperm [MustReleaseBounded, MustReleaseUnbounded] _r_8 :: Level(_r_8) <= _current_wait_level_119) && _residue_119 <= _current_wait_level_119, true]
  ensures [true, (forperm [MustInvokeBounded] _r_9 :: false) && ((forperm [MustInvokeUnbounded] _r_9 :: false) && ((forperm [MustReleaseBounded] _r_9 :: false) && (forperm [MustReleaseUnbounded] _r_9 :: false)))]
{
  var module_defined_0: Bool
  var module_names_0: Set[_Name]
  var _cwl_119: Perm
  var _method_measures_119: Seq[Measure$]
  _method_measures_119 := Seq[Measure$]()
  module_defined_0 := true
  module_names_0 := Set[_Name]()
  module_names_0 := module_names_0 union Set(_single(3106082509126931487350218591))
  inhale acc(__file__()._val, 99 / 100) && issubtype(typeof(__file__()._val), str()) && issubtype(typeof(__file__()._val), str())
  module_names_0 := module_names_0 union Set(_single(2489530350921051593165922143))
  inhale acc(__name__()._val, 99 / 100) && issubtype(typeof(__name__()._val), str()) && issubtype(typeof(__name__()._val), str()) && str___eq__(str___create__(8, 2489249333222104298408468319), __name__()._val)
  assert true
  module_names_0 := module_names_0 union Set(_single(3493880855485680332086796127))
  module_names_0 := module_names_0 union Set(_single(12653))
  module_names_0 := module_names_0 union Set(_single(12909))
  module_names_0 := module_names_0 union Set(_single(4409224812126180285))
  goto __end
  label __end
}
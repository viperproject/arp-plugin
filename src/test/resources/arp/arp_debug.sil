domain ARPLog {

  function ARPLog_Nil(): ARPLog

  function ARPLog_Cons(ref: Ref, fieldId: Int, permission: Perm, level: Int, log: ARPLog): ARPLog

  function ARPLog_head_ref_Cons(log: ARPLog): Ref

  function ARPLog_head_fieldId_Cons(log: ARPLog): Int

  function ARPLog_head_permission_Cons(log: ARPLog): Perm

  function ARPLog_head_level_Cons(log: ARPLog): Int

  function ARPLog_tail_Cons(log: ARPLog): ARPLog

  function ARPLog_type(log: ARPLog): Int

  unique function ARPLog_type_Nil(): Int

  unique function ARPLog_type_Cons(): Int

  function ARPLog_is_Nil(log: ARPLog): Bool

  function ARPLog_is_Cons(log: ARPLog): Bool

  function ARPLog_max_level(log: ARPLog): Int

  function ARPLog_sum_gt(ref: Ref, fieldId: Int, level: Int, log: ARPLog): Perm

  function ARPLog_sum(ref: Ref, fieldId: Int, level: Int, log: ARPLog): Perm

  axiom destruct_over_construct_Cons {
    (forall head_ref: Ref, head_fieldId: Int, head_permission: Perm, head_level: Int, tail: ARPLog :: { ARPLog_Cons(head_ref, head_fieldId, head_permission, head_level, tail) } ARPLog_head_ref_Cons(ARPLog_Cons(head_ref, head_fieldId, head_permission, head_level, tail)) == head_ref && (ARPLog_head_fieldId_Cons(ARPLog_Cons(head_ref, head_fieldId, head_permission, head_level, tail)) == head_fieldId && (ARPLog_head_permission_Cons(ARPLog_Cons(head_ref, head_fieldId, head_permission, head_level, tail)) == head_permission && (ARPLog_head_level_Cons(ARPLog_Cons(head_ref, head_fieldId, head_permission, head_level, tail)) == head_level && ARPLog_tail_Cons(ARPLog_Cons(head_ref, head_fieldId, head_permission, head_level, tail)) == tail))))
  }

  axiom construct_over_destruct_Cons {
    (forall log: ARPLog :: { ARPLog_head_ref_Cons(log) } { ARPLog_head_fieldId_Cons(log) } { ARPLog_head_permission_Cons(log) } { ARPLog_head_level_Cons(log) } { ARPLog_tail_Cons(log) } ARPLog_is_Cons(log) ==> log == ARPLog_Cons(ARPLog_head_ref_Cons(log), ARPLog_head_fieldId_Cons(log), ARPLog_head_permission_Cons(log), ARPLog_head_level_Cons(log), ARPLog_tail_Cons(log)))
  }

  axiom type_of_Nil {
    ARPLog_type(ARPLog_Nil()) == ARPLog_type_Nil()
  }

  axiom type_of_Cons {
    (forall head_ref: Ref, head_fieldId: Int, head_permission: Perm, head_level: Int, tail: ARPLog :: ARPLog_type(ARPLog_Cons(head_ref, head_fieldId, head_permission, head_level, tail)) == ARPLog_type_Cons())
  }

  axiom type_existence {
    (forall log: ARPLog :: { ARPLog_is_Nil(log) } { ARPLog_is_Cons(log) } { ARPLog_type(log) } ARPLog_type(log) == ARPLog_type_Nil() || ARPLog_type(log) == ARPLog_type_Cons())
  }

  axiom type_is_Nil {
    (forall log: ARPLog :: { ARPLog_is_Nil(log) } { ARPLog_type(log) } (ARPLog_type(log) == ARPLog_type_Nil()) == ARPLog_is_Nil(log))
  }

  axiom type_is_Cons {
    (forall log: ARPLog :: { ARPLog_is_Cons(log) } { ARPLog_type(log) } (ARPLog_type(log) == ARPLog_type_Cons()) == ARPLog_is_Cons(log))
  }

  axiom log_max_level {
    (forall log: ARPLog :: { ARPLog_max_level(log) } ARPLog_max_level(log) == 6)
  }

  axiom sum_gt_of_log {
    (forall ref: Ref, fieldId: Int, level: Int, log: ARPLog :: { ARPLog_sum_gt(ref, fieldId, level, log) } (level >= ARPLog_max_level(log) ==> ARPLog_sum_gt(ref, fieldId, level, log) == none) && (level < ARPLog_max_level(log) ==> ARPLog_sum_gt(ref, fieldId, level, log) == ARPLog_sum_gt(ref, fieldId, level + 1, log) + ARPLog_sum(ref, fieldId, level + 1, log)))
  }

  axiom sum_of_log {
    (forall ref: Ref, fieldId: Int, level: Int, log: ARPLog :: { ARPLog_sum(ref, fieldId, level, log) } (ARPLog_is_Nil(log) ==> ARPLog_sum(ref, fieldId, level, log) == none) && (ARPLog_is_Cons(log) ==> ARPLog_sum(ref, fieldId, level, log) == ARPLog_sum(ref, fieldId, level, ARPLog_tail_Cons(log)) + (ARPLog_head_ref_Cons(log) == ref && (ARPLog_head_fieldId_Cons(log) == fieldId && ARPLog_head_level_Cons(log) == level) ? ARPLog_head_permission_Cons(log) : none)))
  }
}

domain ARP_field_functions {

  unique function field_f(): Int

  unique function field_g(): Int
}

field f: Int

field g: Int

function rd(): Perm
  requires false


function rdc(): Perm
  requires false


function rdw(): Perm
  requires false


function globalRd(): Perm
  ensures none < result && result < write


function epsilonRd(): Perm
  ensures none < result && result < write


function ARPHavocBool(): Bool


function ARPHavocInt(): Int


function ARPHavocRef(): Ref


function ARPHavocPerm(): Perm


method bar(x: Ref, bar_rd: Perm)
{
  var bar_log: ARPLog
  bar_log := ARPLog_Nil()
  label ARP_1_inhale_label
  inhale none < bar_rd && bar_rd < write
  label ARP_2_inhale_label
  inhale acc(x.f, write) && (forall r: Ref :: r != null ==> acc(r.f, 1 / 2))
  bar_log := ARPLog_Cons(x, field_f(), write, 6, bar_log)
  label bar_start_label
  x.f := 4
  assert false
  label ARP_3_inhale_label
  inhale x.g == 5
  var arg_r: Ref
  var foo_call_rd: Perm
  label foo_call_label
  label ARP_4_inhale_label
  inhale none < foo_call_rd && foo_call_rd < write
  arg_r := x
  label ARP_1_exhale_label
  bar_log := ARPLog_Cons(arg_r, field_f(), -write, 6, bar_log)
  exhale acc(arg_r.f, write)
  inhale none < ARPLog_sum_gt(arg_r, field_g(), 1, bar_log) ==> foo_call_rd < perm(arg_r.g)
  bar_log := ARPLog_Cons(arg_r, field_g(), -foo_call_rd, 1, bar_log)
  exhale acc(arg_r.g, foo_call_rd)
  label ARP_5_inhale_label
  inhale acc(arg_r.f, write) && acc(arg_r.g, foo_call_rd)
  bar_log := ARPLog_Cons(arg_r, field_f(), write, 6, bar_log)
  inhale none < foo_call_rd
  bar_log := ARPLog_Cons(arg_r, field_g(), foo_call_rd, 1, bar_log)
  label ARP_6_inhale_label
  inhale arg_r.f == arg_r.g + 1
  assert x.g == 5
  assert x.f == 6
  assert false
  label bar_end_label
  label ARP_2_exhale_label
  exhale acc(x.f, write)
  exhale (forall r: Ref :: old[bar_end_label](r != null) ==> acc(r.f, 1 / 2))
}
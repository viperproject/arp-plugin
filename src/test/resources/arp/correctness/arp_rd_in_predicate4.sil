field f: Int

predicate pred(x: Ref, n: Int){
    acc(x.f, write - n * rd) && x.f > 0
}

method foo(y: Ref)
requires acc(y.f, rd)
ensures acc(y.f, rd)

method bar(x: Ref, n: Int)
requires n > 0
requires acc(pred(x, n))
ensures acc(pred(x, n))
{
    unfold acc(pred(x, n))
    foo(x)
    //:: UnexpectedOutput(assert.failed:negative.permission, /carbon/issue/227/)
    assert acc(x.f, write - n * globalRd)
    //:: UnexpectedOutput(fold.failed:assertion.false, /silicon/issue/319/)
    fold acc(pred(x, n))
}
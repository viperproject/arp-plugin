field f: Int
field g: Int

method foo(a: Ref, b: Ref)
requires b != null
requires acc(a.g) && (forall x: Ref :: x != null ==> acc(x.f, rd))
ensures (forall x: Ref :: x != null ==> acc(x.f, rd)) && acc(a.g)
ensures a.g == a.f + b.f
{
    a.g := a.f + b.f
}

method bar(a: Ref, b: Ref)
requires b != null
requires acc(a.g) && (forall x: Ref :: x != null ==> acc(x.f, 1/2))
ensures acc(a.g) && (forall x: Ref :: x != null ==> acc(x.f, 1/2))
{
    a.g := 6
    inhale a.f == 5
    inhale b.f == 6
    //:: UnexpectedOutput(call.precondition:insufficient.permission, /ARP/issue/2/)
    foo(a, b)
    // error corresponds to /ARP/issue/2/ but occurs only in carbon
    //:: UnexpectedOutput(assert.failed:assertion.false, /carbon/issue/0/)
    assert a.g == 11
}

/*
Works with:
 - Silicon Simple
 - Carbon Simple

Does not work with:
 - Silicon
 - Carbon
*/
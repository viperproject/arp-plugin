field f: Int

method foo()
requires forall x: Ref :: x != null ==> acc(x.f, rd)
ensures forall x: Ref :: x != null ==> acc(x.f, rd)

method bar()
requires forall x: Ref :: x != null ==> acc(x.f, write)
requires forall x: Ref :: x != null ==> x.f == 5
ensures forall x: Ref :: x != null ==> acc(x.f, write)
ensures forall x: Ref :: x != null ==> x.f == 5
{
	foo()
	exhale forall x: Ref :: x != null ==> acc(x.f, 1/10)
    //:: UnexpectedOutput(call.precondition:insufficient.permission, /silicon/issue/0/)
	foo()
	exhale forall x: Ref :: x != null ==> acc(x.f, 1/10)
	foo()
	exhale forall x: Ref :: x != null ==> acc(x.f, 1/10)
	foo()
	exhale forall x: Ref :: x != null ==> acc(x.f, 1/10)
	foo()
	exhale forall x: Ref :: x != null ==> acc(x.f, 1/10)
	foo()
	exhale forall x: Ref :: x != null ==> acc(x.f, 1/10)
	foo()
	exhale forall x: Ref :: x != null ==> acc(x.f, 1/10)
	foo()
	exhale forall x: Ref :: x != null ==> acc(x.f, 1/10)
	foo()
	exhale forall x: Ref :: x != null ==> acc(x.f, 1/10)
	foo()
	inhale forall x: Ref :: x != null ==> acc(x.f, 1/10)
	foo()
	inhale forall x: Ref :: x != null ==> acc(x.f, 1/10)
	foo()
	inhale forall x: Ref :: x != null ==> acc(x.f, 1/10)
	foo()
	inhale forall x: Ref :: x != null ==> acc(x.f, 1/10)
	foo()
	inhale forall x: Ref :: x != null ==> acc(x.f, 1/10)
	foo()
	inhale forall x: Ref :: x != null ==> acc(x.f, 1/10)
	foo()
	inhale forall x: Ref :: x != null ==> acc(x.f, 1/10)
	foo()
	inhale forall x: Ref :: x != null ==> acc(x.f, 1/10)
	foo()
	inhale forall x: Ref :: x != null ==> acc(x.f, 1/10)
	foo()
}

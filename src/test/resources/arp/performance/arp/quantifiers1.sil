field f: Int

method foo(s: Seq[Ref])
requires forall x: Ref :: {x in s} x in s ==> acc(x.f, rd)
ensures forall x: Ref :: {x in s} x in s ==> acc(x.f, rd)

method bar(s: Seq[Ref])
requires forall x: Ref :: {x in s} x in s ==> acc(x.f, write)
requires forall x: Ref :: {x in s} x in s ==> x.f == 5
ensures forall x: Ref :: {x in s} x in s ==> acc(x.f, write)
ensures forall x: Ref :: {x in s} x in s ==> x.f == 5
{
	foo(s)
	exhale forall x: Ref :: {x in s} x in s ==> acc(x.f, 1/10)
	foo(s)
	exhale forall x: Ref :: {x in s} x in s ==> acc(x.f, 1/10)
	foo(s)
	exhale forall x: Ref :: {x in s} x in s ==> acc(x.f, 1/10)
	foo(s)
	inhale forall x: Ref :: {x in s} x in s ==> acc(x.f, 1/10)
	foo(s)
	inhale forall x: Ref :: {x in s} x in s ==> acc(x.f, 1/10)
	foo(s)
	inhale forall x: Ref :: {x in s} x in s ==> acc(x.f, 1/10)
	foo(s)
}
